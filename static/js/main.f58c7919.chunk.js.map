{"version":3,"sources":["lib/bid.ts","lib/player.ts","lib/util.ts","lib/game.ts","components/VariantSelector.tsx","components/SilentSwitch.tsx","components/BidSelector.tsx","lib/contract.ts","components/ContractsTable.tsx","components/GameProperties.tsx","components/GameScore.tsx","components/Players.tsx","lib/gameList.ts","components/ScoreSheet.tsx","components/TarockSheet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BID_TYPE","SMALLEST_VARIANT","CARD_SHAPE_VARIANT","PLAYER_TYPE","SMALLEST_VARIANTS","PAGAT","EAGLE","CARD_SHAPE_VARIANTS","CLUB","DIAMOND","HEART","SPADE","BIDS","PARTY","score","party","TRULL","silent","FOUR_KING","CATCH_THE_MAYOR","CATCH_THE_PAGAT","ULTI","variants","UHU","DOUBLE_PARTY","VOLAT","PHEASANT","PHEASANT_IN_2ND","EIGHT_TAROCK","NINE_TAROCK","FURRY","CENTRUM","SMALL_BIRD","LARGE_BIRD","KING_ULTI","KING_UHU","CSUZIMA","KLOPICZKY","getBid","type","canSilent","bid","getBidScore","partyScore","hasVariant","variant","includes","makeFirstLetterCapital","word","length","split","first","rest","toUpperCase","join","toLowerCase","upperCaseToWords","upperCased","map","PARTY_SCORE_TYPE","getAnotherPlayerType","playerType","DECLARER","OPPONENT","getPlayerTypeColor","Map","get","VariantSelector","props","onChange","bidType","selected","RadioGroup","name","event","target","value","FormControlLabel","control","Radio","label","SilentSwitch","FormGroup","Switch","checked","useBidDetailsStyle","makeStyles","theme","modal","display","alignItems","justifyContent","card","backgroundColor","palette","background","default","padding","spacing","BidDetails","useState","open","setOpen","bidVariant","setBidVariant","undefined","setSilent","classes","onSubmit","reset","handleSubmit","taker","valid","Button","color","onClick","Modal","className","onClose","Card","CardHeader","title","CardContent","CardActions","bind","disabled","BidSelector","bids","onAddContract","Grid","container","item","validateContract","contract","contra","Error","Math","log2","createContract","winByTaker","bidBaseScore","flow","calculateContract","ACTION_TYPE","PARTY_SCORE","TOOK_THREE","TOOK_TWO","TOOK_ONE","SOLO","createGame","contracts","declarers","opponents","partyScoreType","called_tarock","scores","updateGameWithScores","game","calculateGame","updateGame","updates","reduce","addScore","prevScore","another","VariantSelectorModal","handleClose","Dialog","DialogContent","DialogActions","columns","field","headerName","valueGetter","onAction","CHANGE","newTaker","handleClick","component","IconButton","Checkbox","indeterminate","nextValue","_","DELETE","isContractField","ContractsTable","onDelete","handleAction","index","actionType","TableContainer","Table","TableHead","TableRow","column","TableCell","TableBody","rowIndex","cellIndex","curry","calledTarockOptions","Object","keys","XX","XIX","XVIII","XVII","XVI","XV","XIV","XIII","XII","partyScoreOptions","GameProperties","alignContent","FormControl","InputLabel","id","Select","labelId","option","MenuItem","FormLabel","row","GameScore","direction","Chip","size","PlayerItem","player","onRemove","rotatePlayerTypeWithNull","AddPlayerDialog","onAdd","setPlayer","DialogTitle","preventDefault","TextField","autoFocus","margin","Players","players","onPlayerAdd","onPlayerChange","onPlayerRemove","playerList","createPlayerList","getPlayersScores","p","fromPairs","defined","scoreAssigner","value1","value2","addBaseScore","baseScore","sumPlayersScore","mapValues","baseScoreAdder","ScoreSheet","gameScoreList","gameScorePerPlayer","forEach","add","Set","values","getAllPlayers","sum","assignWith","sumPlayerScores","allBids","sortBy","b","TarockSheet","setGame","setPlayers","setGameScoreList","prop","prev","uniq","filter","removePlayer","key","otherKey","addPlayer","addContract","updated","i","updateGameContract","removeContract","useAppStyle","App","AppBar","position","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f58c7919.chunk.js","sourcesContent":["export interface Bid extends BidData {\n  type: BID_TYPE;\n}\n\ninterface BidData {\n  score: number | ((party: number) => number);\n  variants?: BidVariant[];\n  silent?: boolean;\n}\n\nexport enum BID_TYPE {\n  PARTY = \"PARTY\",\n  TRULL = \"TRULL\",\n  FOUR_KING = \"FOUR_KING\",\n  CATCH_THE_MAYOR = \"CATCH_THE_MAYOR\",\n  CATCH_THE_PAGAT = \"CATCH_THE_PAGAT\",\n  ULTI = \"ULTI\",\n  UHU = \"UHU\",\n  DOUBLE_PARTY = \"DOUBLE_PARTY\",\n  VOLAT = \"VOLAT\",\n  PHEASANT = \"PHEASANT\",\n  PHEASANT_IN_2ND = \"PHEASANT_IN_2ND\",\n  EIGHT_TAROCK = \"EIGHT_TAROCK\",\n  NINE_TAROCK = \"NINE_TAROCK\",\n  FURRY = \"FURRY\",\n  CENTRUM = \"CENTRUM\",\n  SMALL_BIRD = \"SMALL_BIRD\",\n  LARGE_BIRD = \"LARGE_BIRD\",\n  CSUZIMA = \"CSUZIMA\",\n  KING_ULTI = \"KING_ULTI\",\n  KING_UHU = \"KING_UHU\",\n  KLOPICZKY = \"KLOPICZKY\",\n}\n\nexport enum SMALLEST_VARIANT {\n  PAGAT = \"PAGAT\",\n  EAGLE = \"EAGLE\",\n}\n\nexport enum CARD_SHAPE_VARIANT {\n  HEART = \"HEART\",\n  SPADE = \"SPADE\",\n  CLUB = \"CLUB\",\n  DIAMOND = \"DIAMOND\",\n}\n\nconst SMALLEST_VARIANTS = [SMALLEST_VARIANT.PAGAT, SMALLEST_VARIANT.EAGLE];\nconst CARD_SHAPE_VARIANTS = [\n  CARD_SHAPE_VARIANT.CLUB,\n  CARD_SHAPE_VARIANT.DIAMOND,\n  CARD_SHAPE_VARIANT.HEART,\n  CARD_SHAPE_VARIANT.SPADE,\n];\n\nexport type BidVariant = SMALLEST_VARIANT | CARD_SHAPE_VARIANT;\n\nconst BIDS: { [key in BID_TYPE]: BidData } = {\n  [BID_TYPE.PARTY]: { score: (party: number) => party },\n  [BID_TYPE.TRULL]: { score: 2, silent: true },\n  [BID_TYPE.FOUR_KING]: { score: 2, silent: true },\n  [BID_TYPE.CATCH_THE_MAYOR]: { score: 42, silent: true },\n  [BID_TYPE.CATCH_THE_PAGAT]: { score: 4 },\n  [BID_TYPE.ULTI]: {\n    score: 10,\n    variants: [...SMALLEST_VARIANTS],\n    silent: true,\n  },\n  [BID_TYPE.UHU]: { score: 15, variants: [...SMALLEST_VARIANTS] },\n  [BID_TYPE.DOUBLE_PARTY]: {\n    score: (party: number) => party * 4,\n    silent: true,\n  },\n  [BID_TYPE.VOLAT]: { score: (party: number) => party * 6, silent: true },\n  [BID_TYPE.PHEASANT]: { score: 50, variants: [...SMALLEST_VARIANTS] },\n  [BID_TYPE.PHEASANT_IN_2ND]: { score: 50, variants: [...SMALLEST_VARIANTS] },\n  [BID_TYPE.EIGHT_TAROCK]: { score: 1 },\n  [BID_TYPE.NINE_TAROCK]: { score: 2 },\n  [BID_TYPE.FURRY]: {\n    score: 25,\n    variants: [...CARD_SHAPE_VARIANTS],\n  },\n  [BID_TYPE.CENTRUM]: { score: 10 },\n  [BID_TYPE.SMALL_BIRD]: { score: 15 },\n  [BID_TYPE.LARGE_BIRD]: { score: 20 },\n  [BID_TYPE.KING_ULTI]: {\n    score: 15,\n    variants: [...CARD_SHAPE_VARIANTS],\n  },\n  [BID_TYPE.KING_UHU]: {\n    score: 20,\n    variants: [...CARD_SHAPE_VARIANTS],\n  },\n  [BID_TYPE.CSUZIMA]: { score: 4 },\n  [BID_TYPE.KLOPICZKY]: { score: 3 },\n};\n\nexport const getBid = (type: BID_TYPE): Bid => ({ type, ...BIDS[type] });\nexport const getAllBids = (): Bid[] =>\n  Object.keys(BID_TYPE).map((b: BID_TYPE) => getBid(b));\nexport const canSilent = (bid: Bid): boolean => bid?.silent === true;\nexport const getBidScore = (partyScore: number) => (bid: Bid): number =>\n  typeof bid.score === \"function\" ? bid.score(partyScore) : bid.score;\nexport const hasVariant = (variant: BidVariant) => (bid: Bid): boolean => {\n  const variants = bid?.variants || [];\n  return variants.includes(variant);\n};\n","export enum PLAYER_TYPE {\n  DECLARER = \"DECLARER\",\n  OPPONENT = \"OPPONENT\",\n}\nexport type Player = string;\nexport type PlayerScore = number | null;\n\nexport const getAnotherPlayerType = (playerType: PLAYER_TYPE): PLAYER_TYPE =>\n  playerType === PLAYER_TYPE.DECLARER\n    ? PLAYER_TYPE.OPPONENT\n    : PLAYER_TYPE.DECLARER;\n\nexport interface PlayerListItem {\n  player: Player;\n  playerType: PLAYER_TYPE | null;\n}\nexport type PlayerList = PlayerListItem[];\nexport const createPlayerList = (\n  players: Player[],\n  declarers: Player[],\n  opponents: Player[]\n): PlayerList => {\n  return players.map((player) => ({\n    player,\n    playerType: opponents.includes(player)\n      ? PLAYER_TYPE.OPPONENT\n      : declarers.includes(player)\n      ? PLAYER_TYPE.DECLARER\n      : null,\n  }));\n};\n\ntype PlayerTypeColor = \"primary\" | \"secondary\" | \"default\";\nexport const getPlayerTypeColor = (\n  playerType: PLAYER_TYPE | null\n): PlayerTypeColor => {\n  const mapper = new Map<PLAYER_TYPE | null, PlayerTypeColor>([\n    [PLAYER_TYPE.DECLARER, \"primary\"],\n    [PLAYER_TYPE.OPPONENT, \"secondary\"],\n    [null, \"default\"],\n  ]);\n  return mapper.get(playerType) || \"default\";\n};\n\nexport const rotatePlayerTypeWithNull = (\n  playerType: PLAYER_TYPE | null\n): PLAYER_TYPE | null => {\n  const mapper = new Map([\n    [PLAYER_TYPE.DECLARER, PLAYER_TYPE.OPPONENT],\n    [PLAYER_TYPE.OPPONENT, null],\n    [null, PLAYER_TYPE.DECLARER],\n  ]);\n  return mapper.get(playerType) || null;\n};\n","const makeFirstLetterCapital = (word: string): string => {\n  if (word.length < 1) {\n    return word\n  }\n  const [first, ...rest] = word.split(\"\")\n  return `${first.toUpperCase()}${rest.join(\"\").toLowerCase()}`\n}\n\nexport const upperCaseToWords = (upperCased: string): string => {\n  return upperCased\n    .split(\"_\")\n    .map(makeFirstLetterCapital)\n    .join(\" \")\n}\n","import {\n  calculateContract,\n  Contract,\n  updateBidBaseScore,\n} from \"./contract\";\nimport { getAnotherPlayerType, Player, PLAYER_TYPE, PlayerScore } from \"./player\";\n\ntype GameScore = {\n  [PLAYER_TYPE.DECLARER]: PlayerScore;\n  [PLAYER_TYPE.OPPONENT]: PlayerScore;  \n}\nexport interface Game {\n  contracts: Contract[];\n  declarers: Player[];\n  opponents: Player[];\n  partyScoreType: PARTY_SCORE_TYPE | null;\n  called_tarock: CalledTarockType | null;\n  scores: GameScore\n}\n\ntype CalledTarockType =\n  | \"XX\"\n  | \"XIX\"\n  | \"XVIII\"\n  | \"XVII\"\n  | \"XVI\"\n  | \"XV\"\n  | \"XIV\"\n  | \"XIII\"\n  | \"XII\";\n\nexport const CALLED_TAROCK: { [K in CalledTarockType]: CalledTarockType } = {\n  XX: \"XX\",\n  XIX: \"XIX\",\n  XVIII: \"XVIII\",\n  XVII: \"XVII\",\n  XVI: \"XVI\",\n  XV: \"XV\",\n  XIV: \"XIV\",\n  XIII: \"XIII\",\n  XII: \"XII\",\n};\n\nexport enum PARTY_SCORE_TYPE {\n  KLOPICZKY = \"KLOPICZKY\",\n  TOOK_THREE = \"TOOK_THREE\",\n  TOOK_TWO = \"TOOK_TWO\",\n  TOOK_ONE = \"TOOK_ONE\",\n  SOLO = \"SOLO\",\n}\nexport type PartyScoreValue = 0 | 1 | 2 | 3 | 4;\n\nexport const PARTY_SCORE: { [K in PARTY_SCORE_TYPE]: PartyScoreValue } = {\n  [PARTY_SCORE_TYPE.TOOK_THREE]: 1,\n  [PARTY_SCORE_TYPE.TOOK_TWO]: 2,\n  [PARTY_SCORE_TYPE.TOOK_ONE]: 3,\n  [PARTY_SCORE_TYPE.SOLO]: 4,\n  [PARTY_SCORE_TYPE.KLOPICZKY]: 0,\n};\n\ninterface CreateGameProps {\n  partyScoreType?: PARTY_SCORE_TYPE;\n  called_tarock?: CalledTarockType;\n}\nexport const createGame = (props: CreateGameProps = {}): Game => ({\n  contracts: [],\n  declarers: [],\n  opponents: [],\n  partyScoreType: props.partyScoreType || null,\n  called_tarock: props.called_tarock || null,\n  scores: {\n    [PLAYER_TYPE.DECLARER]: null,\n    [PLAYER_TYPE.OPPONENT]: null\n  }\n});\n\nconst updateGameWithScores = (game: Game): Game => {\n  const scores = calculateGame(game)\n\n  return {\n    ...game,\n    scores: {...scores}\n  }\n}\n\nexport interface UpdateGameProps {\n  partyScoreType?: PARTY_SCORE_TYPE;\n  called_tarock?: CalledTarockType | null;\n}\nexport const updateGame = (updates: UpdateGameProps) => (game: Game): Game => {\n  const contracts =\n    updates.partyScoreType === undefined\n      ? game.contracts\n      : game.contracts.map(\n          updateBidBaseScore(PARTY_SCORE[updates.partyScoreType])\n        );\n\n  return updateGameWithScores({\n    ...game,\n    contracts: [...contracts],\n    ...updates,\n  })\n};\n\nexport const addPlayer = (player: Player, type: PLAYER_TYPE) => (\n  game: Game\n): Game => {\n  const key = type === PLAYER_TYPE.DECLARER ? \"declarers\" : \"opponents\";\n\n  const otherKey = type === PLAYER_TYPE.OPPONENT ? \"declarers\" : \"opponents\";\n\n  if (game[key].includes(player)) {\n    return { ...game };\n  }\n\n  return {\n    ...game,\n    [key]: [...game[key], player],\n    [otherKey]: game[otherKey].filter((p) => p !== player),\n  };\n};\n\nexport const removePlayer = (player: Player) => (game: Game): Game => ({\n  ...game,\n  opponents: game.opponents.filter((p) => p !== player),\n  declarers: game.declarers.filter((p) => p !== player),\n});\n\nexport const addContract = (game: Game) => (contract: Contract): Game => {\n  return updateGameWithScores({\n    ...game,\n    contracts: [...game.contracts, contract],\n  });\n};\n\nexport const removeContract = (game: Game) => (index: number): Game => {\n  return updateGameWithScores({\n    ...game,\n    contracts: game.contracts.filter((_, i) => i !== index),\n  })\n};\n\nexport const updateGameContract = (game: Game) => (index: number) => (\n  updated: Contract\n): Game => {\n\n  return updateGameWithScores({\n    ...game,\n    contracts: game.contracts.map((contract, i) =>\n      i === index ? { ...updated } : contract\n    ),\n  });\n};\n\nexport const calculateGame = (game: Game): GameScore => {\n  return game.contracts.reduce(\n    (partyScore, contract) => {\n      const score = calculateContract(contract);\n      if (score === null) {\n        return partyScore;\n      }\n\n      const addScore = (prevScore: PlayerScore, score: PlayerScore): PlayerScore => {\n        if (prevScore === null) {return score}\n        else {\n          return score === null ? prevScore : score + prevScore\n        }\n      }\n\n      const taker = contract.taker;\n      const another = getAnotherPlayerType(taker);\n\n      return {\n        ...partyScore,\n        [taker]: addScore(partyScore[taker], score),\n        [another]: addScore(partyScore[another], score === null ? null: score * -1) \n      };\n    },\n    {\n      [PLAYER_TYPE.DECLARER]: null,\n      [PLAYER_TYPE.OPPONENT]: null,\n    }\n  );\n\n};\n","import React, { ChangeEvent } from \"react\";\nimport { FormControlLabel, RadioGroup, Radio } from \"@material-ui/core\";\nimport { BidVariant, BID_TYPE, getBid } from \"../lib/bid\";\n\ninterface VariantSelectorProps {\n  onChange: (value: BidVariant) => void;\n  bidType: BID_TYPE;\n  selected?: BidVariant | null;\n}\nconst VariantSelector = (props: VariantSelectorProps) => {\n  const {\n    onChange,\n    bidType,\n    selected = null,\n  } = props;\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value as BidVariant);\n  };\n  const bid = getBid(bidType);\n  if (!bid.variants) {\n    return null;\n  }\n  return (\n    <RadioGroup name=\"variants\" onChange={handleChange} value={selected}>\n      {bid.variants.map((variant) => (\n        <FormControlLabel control={<Radio value={variant} />} label={variant} />\n      ))}\n    </RadioGroup>\n  );\n};\n\nexport default VariantSelector;\n","import React from \"react\";\nimport { Switch, FormControlLabel, FormGroup } from \"@material-ui/core\";\nimport { BID_TYPE, canSilent, getBid } from \"../lib/bid\";\n\ninterface SilentSwitchProps {\n  bidType: BID_TYPE;\n  onChange: (value: boolean) => void;\n  value?: boolean;\n  label?: boolean;\n}\nconst SilentSwitch = ({\n  bidType,\n  onChange,\n  value,\n  label,\n}: SilentSwitchProps) => {\n  const bid = getBid(bidType);\n  if (!canSilent(bid)) {\n    return null;\n  }\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Switch\n            onChange={(event) => onChange(event.target.checked)}\n            checked={value}\n          />\n        }\n        label={label ? \"Silent\" : \"\"}\n      />\n    </FormGroup>\n  );\n};\nexport default SilentSwitch;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Modal,\n  makeStyles,\n  Grid,\n} from \"@material-ui/core\";\n\nimport { Bid, BidVariant, hasVariant } from \"../lib/bid\";\nimport { upperCaseToWords } from \"../lib/util\";\nimport { Contract, CreateContractProps } from \"../lib/contract\";\nimport { PLAYER_TYPE } from \"../lib/player\";\nimport VariantSelector from \"./VariantSelector\";\nimport SilentSwitch from \"./SilentSwitch\";\n\nconst useBidDetailsStyle = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  card: {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\ninterface BidDetailsProps {\n  bid: Bid;\n  onSubmit: (contract: Omit<CreateContractProps, \"partyScore\">) => void;\n}\nconst BidDetails = (props: BidDetailsProps) => {\n  const [open, setOpen] = useState(false);\n  const [bidVariant, setBidVariant] = useState<BidVariant | null>(null);\n  const [silent, setSilent] = useState<boolean | undefined>(undefined);\n  const classes = useBidDetailsStyle();\n  const { bid, onSubmit } = props;\n\n  const reset = () => {\n    setBidVariant(null);\n    setSilent(undefined);\n  };\n\n  const handleSubmit = (taker: PLAYER_TYPE) => {\n    setOpen(false);\n    reset();\n    onSubmit({ bidType: bid.type, taker, silent, bidVariant });\n  };\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => {\n    reset();\n    setOpen(false);\n  };\n\n  const valid = bid.variants\n    ? bidVariant === null\n      ? false\n      : hasVariant(bidVariant)(bid)\n    : true;\n\n  return (\n    <>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleOpen}>\n        {upperCaseToWords(bid.type)}\n      </Button>\n      <Modal open={open} className={classes.modal} onClose={handleClose}>\n        <Card className={classes.card}>\n          <CardHeader title={upperCaseToWords(bid.type)} />\n          <CardContent>\n            <VariantSelector\n              bidType={bid.type}\n              onChange={setBidVariant}\n              selected={bidVariant}\n            />\n            <SilentSwitch bidType={bid.type} onChange={setSilent} label />\n          </CardContent>\n          <CardActions>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={handleSubmit.bind(null, PLAYER_TYPE.DECLARER)}\n              disabled={!valid}\n            >\n              Declarer\n            </Button>\n            <Button\n              color=\"secondary\"\n              variant=\"contained\"\n              onClick={handleSubmit.bind(null, PLAYER_TYPE.OPPONENT)}\n              disabled={!valid}\n            >\n              Opponent\n            </Button>\n            <Button variant=\"contained\" onClick={() => setOpen(false)}>\n              Cancel\n            </Button>\n          </CardActions>\n        </Card>\n      </Modal>\n    </>\n  );\n};\n\ninterface BidSelectorProps {\n  bids: Bid[];\n  onAddContract: (contract: Contract) => void;\n}\nconst BidSelector = ({ bids, onAddContract }: BidSelectorProps) => {\n  return (\n    <Grid container spacing={1}>\n      {bids.map((bid) => (\n        <Grid item key={bid.type}>\n          <BidDetails bid={bid} onSubmit={onAddContract} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default BidSelector;\n","import { PLAYER_TYPE } from \"./player\";\nimport {\n  BidVariant,\n  BID_TYPE,\n  canSilent,\n  hasVariant,\n  getBid,\n  getBidScore,\n} from \"./bid\";\nimport flow from \"lodash/fp/flow\";\nimport pick from \"lodash/fp/pick\";\nimport isEqual from \"lodash/fp/isEqual\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport { PartyScoreValue } from \"./game\";\n\nconst CONTRA_NAMES = [\"None\", \"Contra\", \"Recontra\", \"Subcontra\", \"Mortcontra\"];\n\ntype ContraMultiplier = number;\nexport interface Contract {\n  bidType: BID_TYPE;\n  bidBaseScore: number | null;\n  bidVariant: BidVariant | null;\n  contra: ContraMultiplier;\n  winByTaker: boolean | null;\n  taker: PLAYER_TYPE;\n  silent: boolean;\n}\n\nconst validateContract = (contract: Contract): void | undefined => {\n  const { silent, bidType, bidVariant, contra } = contract;\n  const bid = getBid(bidType);\n  if (silent && !canSilent(bid)) {\n    throw new Error(`${bid.type} can not be silent.`);\n  }\n  if (bidVariant && !hasVariant(bidVariant)(bid)) {\n    throw new Error(`${bid.type} does not have ${bidVariant} variant.`);\n  }\n  const isPowerOfTwo = Math.log2(contra) % 1 === 0;\n  if (!isPowerOfTwo) {\n    throw new Error(`Contra must be power of two, but ${contra} given.`);\n  }\n  if (contra < 1) {\n    throw new Error(`Contra must be greater than 1, but ${contra} given.`);\n  }\n};\n\nexport interface CreateContractProps {\n  bidType: BID_TYPE;\n  partyScore?: PartyScoreValue | null;\n  taker: PLAYER_TYPE;\n  silent?: boolean;\n  bidVariant?: BidVariant | null;\n  winByTaker?: boolean | null;\n}\nexport const createContract = ({\n  bidType,\n  taker,\n  partyScore = null,\n  silent = false,\n  bidVariant = null,\n  winByTaker = null,\n}: CreateContractProps): Contract => {\n  const contract = {\n    bidType,\n    bidVariant,\n    contra: 1,\n    silent,\n    winByTaker,\n    taker,\n    bidBaseScore:\n      partyScore !== null\n        ? flow(getBid, getBidScore(partyScore))(bidType)\n        : null,\n  };\n  validateContract(contract);\n  return contract;\n};\n\nexport const updateBidBaseScore = (partyScore: PartyScoreValue) => (\n  contract: Contract\n): Contract => ({\n  ...contract,\n  bidBaseScore: flow(getBid, getBidScore(partyScore))(contract.bidType),\n});\n\nexport type UpdateContractProps = Partial<\n  Pick<\n    Contract,\n    | \"taker\"\n    | \"winByTaker\"\n    | \"silent\"\n    | \"bidVariant\"\n    | \"contra\"\n  >\n>;\nexport const updateContract = (updates: UpdateContractProps) => (\n  contract: Contract\n): Contract => {\n  const updated = { ...contract, ...updates };\n  validateContract(updated);\n  return updated;\n};\n\nexport type ContractScore = number | null;\nexport const calculateContract = (contract: Contract): ContractScore => {\n  const { winByTaker, bidBaseScore, contra, silent } = contract;\n  if (winByTaker === null || bidBaseScore === null) {\n    return null;\n  }\n  const multiplier = silent ? 0.5 : contra;\n  const sign = winByTaker ? 1 : -1;\n  return sign * bidBaseScore * multiplier;\n};\n\nexport type ContractWithIndex = [Contract, number];\nexport const withIndices = (contracts: Contract[]): ContractWithIndex[] =>\n  contracts.map((contract, index) => [contract, index]);\n\nconst PARTY_LIKE_BIDS = [BID_TYPE.PARTY, BID_TYPE.DOUBLE_PARTY, BID_TYPE.VOLAT];\nexport const filterByPartyLike = (\n  contracts: ContractWithIndex[]\n): ContractWithIndex[] =>\n  contracts.filter(([contract, _]) =>\n    PARTY_LIKE_BIDS.includes(contract.bidType)\n  );\n\nexport const filterByProps = (props: Partial<Contract>) => (contracts: ContractWithIndex[]): ContractWithIndex[] => {\n  return contracts.filter(([contract, _]) => flow(\n      pick(Object.keys(props)),\n      isEqual(props)\n    )(contract)\n  )\n}\n\nexport const groupByPlayerType = (contracts: ContractWithIndex[]) => {\n  const groupped = groupBy(([contract]) => contract.taker)(contracts);\n  return {\n    [PLAYER_TYPE.DECLARER]: groupped[PLAYER_TYPE.DECLARER] || [],\n    [PLAYER_TYPE.OPPONENT]: groupped[PLAYER_TYPE.OPPONENT] || []\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  calculateContract,\n  Contract,\n  UpdateContractProps,\n} from \"../lib/contract\";\nimport { upperCaseToWords } from \"../lib/util\";\nimport {\n  TableContainer,\n  TableHead,\n  TableBody,\n  Table,\n  TableCell,\n  TableRow,\n  IconButton,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  Checkbox,\n  Typography as T,\n} from \"@material-ui/core\";\nimport {\n  MdDelete as RemoveIcon,\n  MdArrowUpward as DoubleContraIcon,\n  MdArrowDownward as DivideContraIcon,\n} from \"react-icons/md\";\nimport { BidVariant } from \"../lib/bid\";\nimport VariantSelector from \"./VariantSelector\";\nimport SilentSwitch from \"./SilentSwitch\";\nimport { getAnotherPlayerType, getPlayerTypeColor, PLAYER_TYPE } from \"../lib/player\";\nimport curry from \"lodash/fp/curry\";\n\ninterface VariantSelectorModalProps {\n  contract: Contract;\n  onChange: (variant: BidVariant) => void;\n}\nconst VariantSelectorModal = (props: VariantSelectorModalProps) => {\n  const { contract, onChange } = props;\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const handleChange = (variant: BidVariant) => {\n    onChange(variant);\n    handleClose();\n  };\n\n  return (\n    <>\n      <Button onClick={handleOpen}>\n        {upperCaseToWords(contract.bidVariant || \"\")}\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogContent>\n          <VariantSelector\n            onChange={handleChange}\n            selected={contract.bidVariant}\n            bidType={contract.bidType}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nenum ACTION_TYPE {\n  DELETE = \"DELETE\",\n  CHANGE = \"CHANGE\",\n}\n\ntype ContractField = keyof UpdateContractProps;\ntype Field = ContractField | string;\ninterface ColumnDefinition {\n  field: Field;\n  headerName: string;\n  valueGetter?: (\n    contract: Contract,\n    onAction?: (actionType: ACTION_TYPE, value?: any) => void\n  ) => React.ReactNode;\n}\nconst columns: ColumnDefinition[] = [\n  {\n    field: \"bidType\",\n    headerName: \"Bid\",\n    valueGetter: (contract: Contract) => upperCaseToWords(contract.bidType),\n  },\n  {\n    field: \"bidVariant\",\n    headerName: \"Variant\",\n    valueGetter: (contract, onAction) => {\n      const handleChange = (variant: BidVariant) =>\n        onAction && onAction(ACTION_TYPE.CHANGE, variant);\n\n      return (\n        <VariantSelectorModal contract={contract} onChange={handleChange} />\n      );\n    },\n  },\n  {\n    field: \"taker\",\n    headerName: \"Taker\",\n    valueGetter: (contract, onAction) => {\n      const newTaker = getAnotherPlayerType(contract.taker)\n      const handleClick = () =>\n        onAction && onAction(ACTION_TYPE.CHANGE, newTaker);\n      const color = getPlayerTypeColor(contract.taker);\n      return (\n        <Button color={color} onClick={handleClick}>\n          {contract.taker}\n        </Button>\n      );\n    },\n  },\n  {\n    field: \"silent\",\n    headerName: \"Silent\",\n    valueGetter: (contract, onAction) => {\n      const handleChange = (silent: boolean) =>\n        onAction && onAction(ACTION_TYPE.CHANGE, silent);\n      return (\n        <SilentSwitch\n          bidType={contract.bidType}\n          onChange={handleChange}\n          value={contract.silent}\n        />\n      );\n    },\n  },\n  {\n    field: \"bidBaseScore\",\n    headerName: \"Base Score\",\n  },\n  {\n    headerName: \"Contra\",\n    field: \"contra\",\n    valueGetter: (contract, onAction) => {\n      const handleClick = (contra: number) =>\n        onAction && onAction(ACTION_TYPE.CHANGE, contra);\n      const handleDivide = () =>\n        contract.contra > 1 && handleClick(contract.contra / 2);\n      const handleDouble = () => handleClick(contract.contra * 2);\n      return (\n        <>\n          <T\n            component={contract.silent === true ? \"s\" : \"span\"}\n            color={contract.silent === true ? \"textPrimary\" : \"textSecondary\"}\n          >\n            {contract.contra}\n          </T>\n          <IconButton\n            title=\"Double\"\n            onClick={handleDouble}\n            disabled={contract.silent}\n          >\n            <DoubleContraIcon />\n          </IconButton>\n          <IconButton\n            title=\"Divide by 2\"\n            onClick={handleDivide}\n            disabled={contract.contra === 1 || contract.silent}\n          >\n            <DivideContraIcon />\n          </IconButton>\n        </>\n      );\n    },\n  },\n  {\n    field: \"winByTaker\",\n    headerName: \"Win by the Taker?\",\n    valueGetter: (contract, onAction) => {\n      const { winByTaker, taker } = contract;\n      const handleClick = () => {\n        const nextValue =\n          winByTaker === null ? true : winByTaker === true ? false : null;\n        onAction && onAction(ACTION_TYPE.CHANGE, nextValue);\n      };\n\n      const title =\n        winByTaker === true\n          ? \"Won by the Taker!\"\n          : winByTaker === false\n          ? \"Lose by the Taker!\"\n          : \"Still unknown / Not count in final score...\";\n\n      return (\n        <Checkbox\n          title={title}\n          checked={winByTaker === true}\n          indeterminate={winByTaker === null}\n          onClick={handleClick}\n          color={taker === PLAYER_TYPE.DECLARER ? \"primary\" : \"secondary\"}\n        />\n      );\n    },\n  },\n  {\n    field: \"takerScore\",\n    headerName: \"Taker score\",\n    valueGetter: (contract) => (\n      <T\n        variant=\"button\"\n        color={\n          contract.taker === PLAYER_TYPE.DECLARER ? \"primary\" : \"secondary\"\n        }\n      >\n        {calculateContract(contract)}\n      </T>\n    ),\n  },\n  {\n    field: \"actions\",\n    headerName: \" \",\n    valueGetter: (_, onAction) => {\n      const handleClick = () => onAction && onAction(ACTION_TYPE.DELETE, null);\n      return (\n        <IconButton title=\"Remove\" onClick={handleClick}>\n          <RemoveIcon />\n        </IconButton>\n      );\n    },\n  },\n];\n\nconst isContractField = (\n  field: Field,\n  contract: Contract\n): field is ContractField => {\n  return field in contract;\n};\n\ninterface ContractsTableProps {\n  contracts: Contract[];\n  onChange: (index: number, field: keyof Contract, value: any) => void;\n  onDelete: (index: number) => void;\n}\nconst ContractsTable = (props: ContractsTableProps) => {\n  const { contracts, onChange, onDelete } = props;\n\n  function handleAction(\n    index: number,\n    field: ContractField | null,\n    actionType: ACTION_TYPE,\n    value: any\n  ) {\n    if (actionType === ACTION_TYPE.DELETE) {\n      return onDelete(index);\n    }\n    if (actionType === ACTION_TYPE.CHANGE && field !== null) {\n      return onChange(index, field, value);\n    }\n    throw new Error(\n      `Invalid if ACTION_TYPE (${actionType}) is CHANGE the field can not be null.`\n    );\n  }\n\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {columns.map((column, index) => (\n              <TableCell key={index}> {column.headerName} </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {contracts.map((contract, rowIndex) => (\n            <TableRow key={rowIndex}>\n              {columns.map((column, cellIndex) => (\n                <TableCell key={cellIndex}>\n                  {isContractField(column.field, contract)\n                    ? column.valueGetter\n                      ? column.valueGetter(\n                          contract,\n                          curry(handleAction)(rowIndex)(column.field)\n                        )\n                      : contract[column.field]\n                    : column.valueGetter\n                    ? column.valueGetter(\n                        contract,\n                        curry(handleAction)(rowIndex)(null)\n                      )\n                    : \" \"}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default ContractsTable;\n","import React, { ChangeEvent } from \"react\";\nimport {\n  CALLED_TAROCK,\n  Game,\n  UpdateGameProps,\n  PARTY_SCORE,\n  PARTY_SCORE_TYPE,\n} from \"../lib/game\";\nimport {\n  Grid,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n} from \"@material-ui/core\";\nimport { upperCaseToWords } from \"../lib/util\";\n\nconst calledTarockOptions = [\"_None_\", ...Object.keys(CALLED_TAROCK)];\nconst partyScoreOptions = Object.keys(PARTY_SCORE);\n\ninterface GamePropertiesProps {\n  game: Game;\n  onChange: (property: keyof UpdateGameProps, value: any) => void;\n}\nconst GameProperties = (props: GamePropertiesProps) => {\n  const { game, onChange } = props;\n  return (\n    <Grid container spacing={3} alignContent=\"space-around\">\n      <Grid item>\n        <FormControl>\n          <InputLabel id=\"called-tarock-selector\">Called</InputLabel>\n          <Select\n            value={game.called_tarock || \"_None_\"}\n            onChange={(event: ChangeEvent<{ value: string }>) => {\n              onChange(\"called_tarock\", event.target.value);\n            }}\n            labelId=\"called-tarock-selector\"\n          >\n            {calledTarockOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option === \"_None_\" ? \"None\" : option}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Party Score</FormLabel>\n          <RadioGroup\n            row\n            value={game.partyScoreType}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => {\n              onChange(\n                \"partyScoreType\",\n                event.target.value as PARTY_SCORE_TYPE\n              );\n            }}\n          >\n            {partyScoreOptions.map((option: PARTY_SCORE_TYPE) => (\n              <FormControlLabel\n                key={option}\n                value={option}\n                control={<Radio />}\n                label={upperCaseToWords(option)}\n              />\n            ))}\n          </RadioGroup>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default GameProperties;\n","import React from \"react\";\nimport { Game } from \"../lib/game\";\nimport { Grid, Chip, Typography as T } from \"@material-ui/core\";\nimport { PLAYER_TYPE } from \"../lib/player\";\n\ninterface GameScoreProps {\n  game: Game;\n}\nconst GameScore = ({ game }: GameScoreProps) => {\n  const {scores} = game;\n  return (\n    <Grid container direction=\"column\">\n      <Grid item container alignItems=\"center\" spacing={1}>\n        <Grid item>\n          <T color=\"primary\" display=\"inline\" variant=\"h6\">\n            Declarers:{\" \"}\n          </T>\n        </Grid>\n        <Grid item>\n          {scores[PLAYER_TYPE.DECLARER] !== null ? (\n            <Chip\n              color=\"primary\"\n              size=\"small\"\n              variant=\"outlined\"\n              label={scores[PLAYER_TYPE.DECLARER]}\n            />\n          ) : null}\n        </Grid>\n      </Grid>\n      <Grid item container alignItems=\"center\" spacing={1}>\n        <Grid item>\n          <T color=\"secondary\" display=\"inline\" variant=\"h6\">\n            Opponents:{\" \"}\n          </T>\n        </Grid>\n        <Grid item>\n          {scores[PLAYER_TYPE.OPPONENT] !== null ? (\n            <Chip\n              color=\"secondary\"\n              size=\"small\"\n              variant=\"outlined\"\n              label={scores[PLAYER_TYPE.OPPONENT]}\n            />\n          ) : null}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default GameScore;\n","import {\n  Button,\n  Chip,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Grid,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { Game } from \"../lib/game\";\nimport {\n  createPlayerList,\n  getPlayerTypeColor,\n  Player,\n  PLAYER_TYPE,\n  rotatePlayerTypeWithNull,\n} from \"../lib/player\";\n\ninterface PlayerItemProps {\n  player: Player;\n  playerType: PLAYER_TYPE | null;\n  onRemove: (player: Player) => void;\n  onChange: (player: Player, playerType: PLAYER_TYPE | null) => void;\n}\nconst PlayerItem = (props: PlayerItemProps) => {\n  const { player, playerType, onRemove, onChange } = props;\n  const handleRemove = () => onRemove(player);\n  const handleChange = () =>\n    onChange(player, rotatePlayerTypeWithNull(playerType));\n  const color = getPlayerTypeColor(playerType);\n  return (\n    <>\n      <Chip\n        color={color}\n        label={player}\n        variant=\"default\"\n        onDelete={handleRemove}\n        onClick={handleChange}\n      />\n    </>\n  );\n};\n\ninterface AddPlayerDialogProps {\n  open: boolean;\n  onAdd: (player: Player) => void;\n  onClose: () => void;\n}\nconst AddPlayerDialog = ({ open, onAdd, onClose }: AddPlayerDialogProps) => {\n  const [player, setPlayer] = useState(\"\");\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPlayer(event.target.value);\n  };\n  const handleClose = () => {\n    setPlayer(\"\");\n    onClose();\n  };\n  const handleAdd = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    onAdd(player);\n    setPlayer(\"\");\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <DialogTitle>Add Player</DialogTitle>\n      <DialogContent>\n        <form onSubmit={handleAdd} >\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          label=\"Player Name\"\n          value={player}\n          onChange={handleChange}\n        />\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\ninterface PlayersProps {\n  players: Player[];\n  game: Game;\n  onPlayerAdd: (player: Player) => void;\n  onPlayerRemove: (player: Player) => void;\n  onPlayerChange: (player: Player, playerType: PLAYER_TYPE | null) => void;\n}\nconst Players = (props: PlayersProps) => {\n  const { players, onPlayerAdd, onPlayerChange, onPlayerRemove, game } = props;\n  const [open, setOpen] = useState<boolean>(false);\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleOpen = () => setOpen(true);\n  const handlePlayerAdd = (player: Player) => {\n    setOpen(false);\n    onPlayerAdd(player);\n  };\n  const playerList = createPlayerList(players, game.declarers, game.opponents);\n  return (\n    <Grid container spacing={3}>\n      <AddPlayerDialog\n        open={open}\n        onAdd={handlePlayerAdd}\n        onClose={handleClose}\n      />\n      <Grid item>\n        <Button variant=\"contained\" onClick={handleOpen}>\n          Add Player\n        </Button>\n      </Grid>\n      <Grid item>\n        {playerList.map(({ player, playerType }) => (\n          <PlayerItem\n            key={player}\n            onChange={onPlayerChange}\n            onRemove={onPlayerRemove}\n            player={player}\n            playerType={playerType}\n          />\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Players;\n","import { Game } from \"./game\";\nimport { Player, PlayerScore, PLAYER_TYPE } from \"./player\";\nimport fromPairs from \"lodash/fp/fromPairs\";\nimport assignWith from \"lodash/assignWith\";\nimport mapValues from \"lodash/fp/mapValues\";\n\nexport type GameScorePerPlayer = { [keyof: string]: PlayerScore };\nexport const getPlayersScores = (game: Game): GameScorePerPlayer => {\n  const opponents = game.opponents.map((p) => [\n    p,\n    game.scores[PLAYER_TYPE.OPPONENT] || null,\n  ]);\n  const declarers = game.declarers.map((p) => [\n    p,\n    game.scores[PLAYER_TYPE.DECLARER] || null,\n  ]);\n  return {\n    ...fromPairs(opponents),\n    ...fromPairs(declarers),\n  };\n};\n\nconst defined = (value: any): boolean => value !== undefined && value !== null;\n\nconst scoreAssigner = (\n  value1: number | undefined | null,\n  value2: number | undefined | null\n): number => {\n  value1 = defined(value1) ? value1 : 0;\n  value2 = defined(value2) ? value2 : 0;\n\n  return (value1 as number) + (value2 as number);\n};\n\nconst baseScoreAdder = (baseScore: number) => (score: number | null) => {\n  score = defined(score) ? score : 0;\n  return (score as number) + baseScore;\n};\n\nexport const addBaseScore = (baseScore: number) => (\n  sumPlayersScore: GameScorePerPlayer\n): GameScorePerPlayer => mapValues(baseScoreAdder(baseScore))(sumPlayersScore);\n\nexport const sumPlayerScores = (\n  gameScoreList: GameScorePerPlayer[]\n): GameScorePerPlayer => assignWith({}, ...gameScoreList, scoreAssigner);\n\nexport const getAllPlayers = (\n  gameScoreList: GameScorePerPlayer[]\n): Player[] => {\n  const players = gameScoreList.reduce((players, gameScorePerPlayer) => {\n    Object.keys(gameScorePerPlayer).forEach((p) => players.add(p));\n    return players;\n  }, new Set<Player>());\n  return [...players.values()];\n};\n","import {\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport {\n  addBaseScore,\n  GameScorePerPlayer,\n  getAllPlayers,\n  sumPlayerScores,\n} from \"../lib/gameList\";\n\nconst BASE_SCORE = 100;\n\ninterface ScoreSheetProps {\n  gameScoreList: GameScorePerPlayer[];\n}\nconst ScoreSheet = ({ gameScoreList }: ScoreSheetProps) => {\n  const players = getAllPlayers(gameScoreList);\n  const sum = addBaseScore(BASE_SCORE)(sumPlayerScores(gameScoreList));\n\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Game</TableCell>\n            {players.map((player) => (\n              <TableCell key={player}>{`${player} (${\n                sum[player] === undefined ? \"\" : sum[player]\n              })`}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {gameScoreList.map((scores, index) => (\n            <TableRow key={index}>\n              <TableCell>{index + 1}</TableCell>\n              {players.map((player) => (\n                <TableCell key={player}>\n                  {scores[player] === undefined ? \" \" : scores[player]}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default ScoreSheet;\n","import React, { useState } from \"react\";\nimport { getAllBids, Bid } from \"../lib/bid\";\nimport BidSelector from \"./BidSelector\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport {\n  Game,\n  createGame,\n  addContract,\n  updateGame,\n  updateGameContract,\n  removeContract,\n  PARTY_SCORE,\n  removePlayer,\n  addPlayer,\n  UpdateGameProps,\n} from \"../lib/game\";\nimport { Contract, createContract, updateContract } from \"../lib/contract\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport ContractsTable from \"./ContractsTable\";\nimport GameProperties from \"./GameProperties\";\nimport flow from \"lodash/fp/flow\";\nimport uniq from \"lodash/fp/uniq\";\nimport GameScore from \"./GameScore\";\nimport Players from \"./Players\";\nimport { Player, PLAYER_TYPE } from \"../lib/player\";\nimport { GameScorePerPlayer, getPlayersScores } from \"../lib/gameList\";\nimport ScoreSheet from \"./ScoreSheet\";\n\nconst allBids = sortBy((b: Bid) => b.type)(getAllBids());\n\nconst TarockSheet = () => {\n  const [game, setGame] = useState<Game>(createGame());\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [gameScoreList, setGameScoreList] = useState<GameScorePerPlayer[] >([]);\n\n  const handleContractDelete = (index: number) =>\n    setGame(removeContract(game)(index));\n  const handleResetGame = () => setGame(createGame());\n  const handleAddPlayer = (player: Player) =>\n    setPlayers((prev) => uniq([...prev, player]));\n  const handleRemovePlayer = (player: Player) =>\n    setPlayers((prev) => prev.filter((p) => p !== player));\n  const handleChangePlayer = (\n    player: Player,\n    playerType: PLAYER_TYPE | null\n  ) => {\n    if (playerType === null) {\n      setGame(removePlayer(player)(game));\n    } else {\n      setGame(addPlayer(player, playerType)(game));\n    }\n  };\n  const handleChangeGameProperties = (\n    prop: keyof UpdateGameProps,\n    value: any\n  ) => {\n    setGame(updateGame({ [prop]: value })(game));\n  };\n  const handleAddContract = (contract: Contract) => {\n    const partyScore = game?.partyScoreType\n      ? PARTY_SCORE[game?.partyScoreType]\n      : null;\n    return setGame(\n      flow(\n        createContract,\n        addContract(game)\n      )({\n        ...contract,\n        partyScore,\n      })\n    );\n  };\n  const handleChangeContract = (\n    index: number,\n    field: keyof Contract,\n    value: any\n  ) => {\n    setGame(\n      flow(\n        updateContract({ [field]: value }),\n        updateGameContract(game)(index)\n      )(game.contracts[index])\n    );\n  };\n  const handleSaveGame = () => {\n    setGameScoreList([...gameScoreList, getPlayersScores(game)]);\n    setGame(createGame());\n  };\n\n  return (\n    <Grid container spacing={3} direction=\"column\">\n      <Grid item>\n        <Grid item container spacing={1} direction=\"row\">\n          <Grid item>\n            <Button variant=\"contained\" onClick={handleResetGame}>\n              Reset Game\n            </Button>\n          </Grid>\n          <Grid item>\n            <GameProperties game={game} onChange={handleChangeGameProperties} />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Players\n          players={players}\n          game={game}\n          onPlayerAdd={handleAddPlayer}\n          onPlayerRemove={handleRemovePlayer}\n          onPlayerChange={handleChangePlayer}\n        />\n      </Grid>\n      <Grid item container>\n        <Grid item>\n          <GameScore game={game} />\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={handleSaveGame}>\n            Save Scores\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <BidSelector bids={allBids} onAddContract={handleAddContract} />\n      </Grid>\n      <Grid item>\n        <ContractsTable\n          contracts={game?.contracts as Contract[]}\n          onChange={handleChangeContract}\n          onDelete={handleContractDelete}\n        />\n      </Grid>\n      <Grid item>\n        <ScoreSheet gameScoreList={gameScoreList} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default TarockSheet;\n","import React from \"react\";\nimport { AppBar, Container, makeStyles, Paper, Typography as T } from \"@material-ui/core\";\nimport { CgCardHearts as Icon } from \"react-icons/cg\";\nimport TarockSheet from \"./components/TarockSheet\";\n\nconst useAppStyle = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4)\n  }\n}))\n\nfunction App() {\n  const classes = useAppStyle()\n  \n  return (\n    <>\n      <AppBar position=\"static\">\n        <T variant=\"h2\"><Icon color=\"red\" /> Tarock Sheet</T>\n      </AppBar>\n      <Container className={classes.container}>\n        <TarockSheet />\n      </Container>\n    </>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}