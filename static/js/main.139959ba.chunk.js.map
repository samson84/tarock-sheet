{"version":3,"sources":["lib/bid.ts","lib/player.ts","lib/util.ts","lib/game.ts","components/ContractSelector.tsx","lib/contract.ts","components/ContractsTable.tsx","components/VariantSelector.tsx","components/SilentSwitch.tsx","components/MultiplierSelector.tsx","components/GameProperties.tsx","components/Players.tsx","lib/gameScoreList.ts","components/TarockSheet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BID_TYPE","SMALLEST_VARIANT","CARD_SHAPE_VARIANT","BID_GROUPS","PARTY_LIKE","weight","ULTI_LIKE","CENTRUM_LIKE","CATCHES","OTHERS","PLAYER_TYPE","SMALLEST_VARIANTS","PAGAT","EAGLE","CARD_SHAPE_VARIANTS","CLUB","DIAMOND","HEART","SPADE","BIDS","PARTY","score","party","group","TRULL","silent","FOUR_KING","CATCH_THE_MAYOR","CATCH_THE_PAGAT","ULTI","variants","notWinIfSilent","UHU","DOUBLE_PARTY","VOLAT","PHEASANT","PHEASANT_IN_2ND","EIGHT_TAROCK","winByDefault","denyContra","NINE_TAROCK","FURRY","CENTRUM","SMALL_BIRD","LARGE_BIRD","KING_ULTI","KING_UHU","CSUZIMA","KLOPICZKY","getBid","type","canSilent","bid","getBidScore","partyScore","makeFirstLetterCapital","word","length","split","first","rest","toUpperCase","join","toLowerCase","upperCaseToWords","upperCased","map","PARTY_SCORE_TYPE","updatePlayer","updates","player","getAnotherPlayerType","playerType","DECLARER","OPPONENT","getPlayerTypeColor","Map","get","getPlayerNumberByType","players","reduce","declarersNumber","opponentsNumber","clearPlayersType","filterPlayersInGame","filter","createPlayerListObject","playerList","playerListObject","id","ContractSelector","bidsByGroup","onAddContract","useState","silentAndWin","setSilentAndWin","Grid","container","spacing","alignItems","sortBy","g","Object","keys","item","variant","display","color","Box","component","mr","Button","onClick","bidType","shouldWinWithSilent","taker","bidVariant","winByTaker","handleClick","size","disabled","FormControlLabel","control","Switch","checked","onChange","prev","name","label","validateContract","contract","contra","Error","includes","Math","log2","createContract","bidBaseScore","flow","calculateContract","ACTION_TYPE","PARTY_SCORE","TOOK_THREE","TOOK_TWO","TOOK_ONE","SOLO","createGame","props","contracts","partyScoreType","partyBaseScore","called_tarock","scores","updateGameWithScores","game","calculateGame","updateGame","undefined","updateBidBaseScore","addContract","updatedContract","removeAllContract","addScore","prevScore","another","VariantSelector","selected","render","onClose","open","setOpen","handleClose","Dialog","DialogContent","RadioGroup","event","target","value","Radio","DialogActions","SilentSwitch","FormGroup","MultiplierSelector","handleChange","IconButton","title","VariantSelectorModal","handleOpen","columns","field","headerName","valueGetter","onAction","CHANGE","newTaker","Checkbox","indeterminate","nextValue","_","DELETE","isContractField","ContractsTable","onDelete","handleAction","index","actionType","TableContainer","Table","TableHead","TableRow","column","TableCell","TableBody","rowIndex","cellIndex","curry","calledTarockOptions","XX","XIX","XVIII","XVII","XVI","XV","XIV","XIII","XII","partyScoreOptions","GameProperties","alignContent","FormControl","InputLabel","Select","labelId","option","MenuItem","FormLabel","row","PlayerAvatar","Avatar","slice","EditablePlayerItem","onRemove","prop","handleNameChange","handleBaseScoreChange","Card","CardContent","direction","xs","TextField","baseScore","PlayerItem","playing","hasCurrentScore","currentScore","currentScoreText","CardHeader","avatar","subheader","CardActions","Players","onPlayerListChange","onSaveScores","saveDisabled","edit","setEdit","handleRemove","removePlayer","updated","updatePlayerAt","v4uuid","getCurrentScoreForPlayers","numberOfDeclarers","numberOfOpponents","opponentsGameScore","declarersGameScore","getScore","declarersScore","opponentsScore","isReadyForSave","numbers","playerNumberValid","isEqual","gameScoreValid","defined","Boolean","scoreSumAssigner","sumPlayerScores","playerListObjects","assignWith","allBidsByGroup","bids","b","groupBy","getAllBidsByGorup","TarockSheet","setGame","setPlayers","gameScoreList","setGameScoreList","useEffect","updatePlayersState","updateGameScoreListState","assignScoresToPlayers","updatedGameScoreList","concat","addContractFlipped","i","updateGameContract","removeContract","useAppStyle","makeStyles","theme","padding","App","classes","AppBar","position","Container","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.139959ba.chunk.js","sourcesContent":["import groupBy from \"lodash/fp/groupBy\";\nimport sortBy from \"lodash/fp/sortBy\";\n\nexport interface Bid extends BidData {\n  type: BID_TYPE;\n}\n\ninterface BidData {\n  score: number | ((party: number) => number);\n  group?: BidGroupType;\n  variants?: BidVariant[];\n  silent?: boolean;\n  winByDefault?: boolean;\n  notWinIfSilent?: boolean;\n  denyContra?: boolean;\n}\n\nexport enum BID_TYPE {\n  PARTY = \"PARTY\",\n  TRULL = \"TRULL\",\n  FOUR_KING = \"FOUR_KING\",\n  CATCH_THE_MAYOR = \"CATCH_THE_MAYOR\",\n  CATCH_THE_PAGAT = \"CATCH_THE_PAGAT\",\n  ULTI = \"ULTI\",\n  UHU = \"UHU\",\n  DOUBLE_PARTY = \"DOUBLE_PARTY\",\n  VOLAT = \"VOLAT\",\n  PHEASANT = \"PHEASANT\",\n  PHEASANT_IN_2ND = \"PHEASANT_IN_2ND\",\n  EIGHT_TAROCK = \"EIGHT_TAROCK\",\n  NINE_TAROCK = \"NINE_TAROCK\",\n  FURRY = \"FURRY\",\n  CENTRUM = \"CENTRUM\",\n  SMALL_BIRD = \"SMALL_BIRD\",\n  LARGE_BIRD = \"LARGE_BIRD\",\n  CSUZIMA = \"CSUZIMA\",\n  KING_ULTI = \"KING_ULTI\",\n  KING_UHU = \"KING_UHU\",\n  KLOPICZKY = \"KLOPICZKY\",\n}\n\nexport type BidGroupType =\n  | \"PARTY_LIKE\"\n  | \"ULTI_LIKE\"\n  | \"CENTRUM_LIKE\"\n  | \"CATCHES\"\n  | \"OTHERS\";\nconst BID_GROUPS: { [K in BidGroupType]: { weight: number } } = {\n  PARTY_LIKE: { weight: 10 },\n  ULTI_LIKE: { weight: 20 },\n  CENTRUM_LIKE: { weight: 30 },\n  CATCHES: { weight: 40 },\n  OTHERS: { weight: 50 },\n};\nexport const bidGroupNamesByWeight = () =>\n  sortBy((g) => BID_GROUPS[g as BidGroupType].weight, Object.keys(BID_GROUPS));\n\nexport enum SMALLEST_VARIANT {\n  PAGAT = \"PAGAT\",\n  EAGLE = \"EAGLE\",\n}\n\nexport enum CARD_SHAPE_VARIANT {\n  HEART = \"HEART\",\n  SPADE = \"SPADE\",\n  CLUB = \"CLUB\",\n  DIAMOND = \"DIAMOND\",\n}\n\nconst SMALLEST_VARIANTS = [SMALLEST_VARIANT.PAGAT, SMALLEST_VARIANT.EAGLE];\nconst CARD_SHAPE_VARIANTS = [\n  CARD_SHAPE_VARIANT.CLUB,\n  CARD_SHAPE_VARIANT.DIAMOND,\n  CARD_SHAPE_VARIANT.HEART,\n  CARD_SHAPE_VARIANT.SPADE,\n];\n\nexport type BidVariant = SMALLEST_VARIANT | CARD_SHAPE_VARIANT;\n\nconst BIDS: { [key in BID_TYPE]: BidData } = {\n  [BID_TYPE.PARTY]: { score: (party: number) => party, group: \"PARTY_LIKE\" },\n  [BID_TYPE.TRULL]: { score: 2, silent: true },\n  [BID_TYPE.FOUR_KING]: { score: 2, silent: true },\n  [BID_TYPE.CATCH_THE_MAYOR]: { score: 42, silent: true, group: \"CATCHES\" },\n  [BID_TYPE.CATCH_THE_PAGAT]: { score: 4, group: \"CATCHES\" },\n  [BID_TYPE.ULTI]: {\n    score: 10,\n    variants: [...SMALLEST_VARIANTS],\n    silent: true,\n    group: \"ULTI_LIKE\",\n    notWinIfSilent: true,\n  },\n  [BID_TYPE.UHU]: {\n    score: 15,\n    variants: [...SMALLEST_VARIANTS],\n    group: \"ULTI_LIKE\",\n  },\n  [BID_TYPE.DOUBLE_PARTY]: {\n    score: (party: number) => party * 4,\n    silent: true,\n    group: \"PARTY_LIKE\",\n  },\n  [BID_TYPE.VOLAT]: {\n    score: (party: number) => party * 6,\n    silent: true,\n    group: \"PARTY_LIKE\",\n  },\n  [BID_TYPE.PHEASANT]: {\n    score: 50,\n    variants: [...SMALLEST_VARIANTS],\n    group: \"ULTI_LIKE\",\n  },\n  [BID_TYPE.PHEASANT_IN_2ND]: {\n    score: 50,\n    variants: [...SMALLEST_VARIANTS],\n    group: \"ULTI_LIKE\",\n  },\n  [BID_TYPE.EIGHT_TAROCK]: { score: 1, winByDefault: true, denyContra: true },\n  [BID_TYPE.NINE_TAROCK]: { score: 2, winByDefault: true, denyContra: true },\n  [BID_TYPE.FURRY]: {\n    score: 25,\n    variants: [...CARD_SHAPE_VARIANTS],\n    group: \"ULTI_LIKE\",\n  },\n  [BID_TYPE.CENTRUM]: { score: 10, group: \"CENTRUM_LIKE\" },\n  [BID_TYPE.SMALL_BIRD]: { score: 10, group: \"CENTRUM_LIKE\" },\n  [BID_TYPE.LARGE_BIRD]: { score: 10, group: \"CENTRUM_LIKE\" },\n  [BID_TYPE.KING_ULTI]: {\n    score: 15,\n    variants: [...CARD_SHAPE_VARIANTS],\n    group: \"ULTI_LIKE\",\n  },\n  [BID_TYPE.KING_UHU]: {\n    score: 20,\n    variants: [...CARD_SHAPE_VARIANTS],\n    group: \"ULTI_LIKE\",\n  },\n  [BID_TYPE.CSUZIMA]: { score: 4 },\n  [BID_TYPE.KLOPICZKY]: { score: 3, winByDefault: true, denyContra: true },\n};\n\nexport const getBid = (type: BID_TYPE): Bid => ({ type, ...BIDS[type] });\n\nexport const getAllBids = (): Bid[] =>\n  Object.keys(BID_TYPE).map((b: BID_TYPE) => getBid(b));\n\nexport type BidsByGroup = { [K in BidGroupType]: Bid[] };\nexport const getAllBidsByGorup = (): BidsByGroup => {\n  const bids = getAllBids();\n  return groupBy((bid) => bid.group || \"OTHERS\", bids) as BidsByGroup;\n};\n\nexport const canSilent = (bid: Bid): boolean => bid?.silent === true;\n\nexport const getBidScore = (partyScore: number) => (bid: Bid): number =>\n  typeof bid.score === \"function\" ? bid.score(partyScore) : bid.score;\n\nexport const hasVariant = (variant: BidVariant) => (bid: Bid): boolean => {\n  const variants = bid?.variants || [];\n  return variants.includes(variant);\n};\n","import { createId, Id } from \"./util\";\n\nexport enum PLAYER_TYPE {\n  DECLARER = \"DECLARER\",\n  OPPONENT = \"OPPONENT\",\n}\nexport interface Player {\n  id: Id;\n  name: string;\n  baseScore: number;\n  score: PlayerScore;\n  currentScore: PlayerScore;\n  type: PLAYER_TYPE | null;\n}\nexport type PlayerScore = number | null;\n\nexport const createPlayer = (): Player => ({\n  id: createId(),\n  name: \"\",\n  baseScore: 100,\n  score: null,\n  currentScore: null,\n  type: null,\n});\n\nexport type UpdatePlayerProps = Partial<Omit<Player, \"id\">>;\nexport const updatePlayer = (updates: UpdatePlayerProps) => (\n  player: Player\n): Player => ({\n  ...player,\n  ...updates,\n});\n\nexport const getAnotherPlayerType = (playerType: PLAYER_TYPE): PLAYER_TYPE =>\n  playerType === PLAYER_TYPE.DECLARER\n    ? PLAYER_TYPE.OPPONENT\n    : PLAYER_TYPE.DECLARER;\n\nexport type PlayerList = Player[];\nexport const addPlayer = (player: Player) => (\n  playerList: PlayerList\n): PlayerList => {\n  return [...playerList, player];\n};\n\nexport const removePlayer = (player: Player) => (\n  playerList: PlayerList\n): PlayerList => playerList.filter(({ id }) => id !== player.id);\n\nexport const updatePlayerAt = (updated: Player) => (\n  playerList: PlayerList\n): PlayerList =>\n  playerList.map((player) => (player.id === updated.id ? updated : player));\n\ntype PlayerTypeColor = \"primary\" | \"secondary\" | \"default\";\nexport const getPlayerTypeColor = (\n  playerType: PLAYER_TYPE | null\n): PlayerTypeColor => {\n  const mapper = new Map<PLAYER_TYPE | null, PlayerTypeColor>([\n    [PLAYER_TYPE.DECLARER, \"primary\"],\n    [PLAYER_TYPE.OPPONENT, \"secondary\"],\n    [null, \"default\"],\n  ]);\n  return mapper.get(playerType) || \"default\";\n};\n\nexport const rotatePlayerTypeWithNull = (\n  playerType: PLAYER_TYPE | null\n): PLAYER_TYPE | null => {\n  const mapper = new Map([\n    [PLAYER_TYPE.DECLARER, PLAYER_TYPE.OPPONENT],\n    [PLAYER_TYPE.OPPONENT, null],\n    [null, PLAYER_TYPE.DECLARER],\n  ]);\n  return mapper.get(playerType) || null;\n};\n\nexport const getPlayerNumberByType = (\n  players: PlayerList\n): [number, number] => {\n  const [declarersNumber, opponentsNumber] = players.reduce(\n    ([declarersNumber, opponentsNumber], player) => {\n      if (player.type === PLAYER_TYPE.OPPONENT) {\n        return [declarersNumber, opponentsNumber + 1];\n      } else if (player.type === PLAYER_TYPE.DECLARER) {\n        return [declarersNumber + 1, opponentsNumber];\n      } else {\n        return [declarersNumber, opponentsNumber];\n      }\n    },\n    [0, 0]\n  );\n  return [declarersNumber, opponentsNumber];\n};\n\nexport const clearPlayersType = (players: PlayerList): PlayerList =>\n  players.map((player) => updatePlayer({ type: null })(player));\n\nexport const filterPlayersInGame = (players: PlayerList): PlayerList =>\n  players.filter((player) => player.type !== null);\n\nexport type PlayerListObject = { [key: string]: Player };\nexport const createPlayerListObject = (\n  playerList: PlayerList\n): PlayerListObject => {\n  return playerList.reduce((playerListObject, player) => {\n    playerListObject[player.id as string] = player;\n    return playerListObject;\n  }, {} as PlayerListObject);\n};\n","import { v4 as v4uuid } from \"uuid\";\n\nconst makeFirstLetterCapital = (word: string): string => {\n  if (word.length < 1) {\n    return word;\n  }\n  const [first, ...rest] = word.split(\"\");\n  return `${first.toUpperCase()}${rest.join(\"\").toLowerCase()}`;\n};\n\nexport const upperCaseToWords = (upperCased: string): string => {\n  return upperCased.split(\"_\").map(makeFirstLetterCapital).join(\" \");\n};\n\nexport type Id = string;\nexport const createId = (): Id => v4uuid();\n","import {\n  calculateContract,\n  Contract,\n  updateBidBaseScore,\n  createContract,\n} from \"./contract\";\nimport { getAnotherPlayerType, PLAYER_TYPE, PlayerScore } from \"./player\";\n\ntype GameScore = {\n  [PLAYER_TYPE.DECLARER]: PlayerScore;\n  [PLAYER_TYPE.OPPONENT]: PlayerScore;\n};\nexport interface Game {\n  contracts: Contract[];\n  partyScoreType: PARTY_SCORE_TYPE | null;\n  partyBaseScore: number;\n  called_tarock: CalledTarockType | null;\n  scores: GameScore;\n}\n\ntype CalledTarockType =\n  | \"XX\"\n  | \"XIX\"\n  | \"XVIII\"\n  | \"XVII\"\n  | \"XVI\"\n  | \"XV\"\n  | \"XIV\"\n  | \"XIII\"\n  | \"XII\";\n\nexport const CALLED_TAROCK: { [K in CalledTarockType]: CalledTarockType } = {\n  XX: \"XX\",\n  XIX: \"XIX\",\n  XVIII: \"XVIII\",\n  XVII: \"XVII\",\n  XVI: \"XVI\",\n  XV: \"XV\",\n  XIV: \"XIV\",\n  XIII: \"XIII\",\n  XII: \"XII\",\n};\n\nexport enum PARTY_SCORE_TYPE {\n  KLOPICZKY = \"KLOPICZKY\",\n  TOOK_THREE = \"TOOK_THREE\",\n  TOOK_TWO = \"TOOK_TWO\",\n  TOOK_ONE = \"TOOK_ONE\",\n  SOLO = \"SOLO\",\n}\nexport type PartyScoreValue = 0 | 1 | 2 | 3 | 4;\n\nexport const isPartyLike = (partyScoreType: PARTY_SCORE_TYPE): boolean =>\n  [\n    PARTY_SCORE_TYPE.TOOK_THREE,\n    PARTY_SCORE_TYPE.TOOK_TWO,\n    PARTY_SCORE_TYPE.TOOK_ONE,\n    PARTY_SCORE_TYPE.SOLO,\n  ].includes(partyScoreType);\n\nexport const PARTY_SCORE: { [K in PARTY_SCORE_TYPE]: PartyScoreValue } = {\n  [PARTY_SCORE_TYPE.TOOK_THREE]: 1,\n  [PARTY_SCORE_TYPE.TOOK_TWO]: 2,\n  [PARTY_SCORE_TYPE.TOOK_ONE]: 3,\n  [PARTY_SCORE_TYPE.SOLO]: 4,\n  [PARTY_SCORE_TYPE.KLOPICZKY]: 0,\n};\n\ninterface CreateGameProps {\n  partyScoreType?: PARTY_SCORE_TYPE;\n  called_tarock?: CalledTarockType;\n}\nexport const createGame = (props: CreateGameProps = {}): Game => ({\n  contracts: [],\n  partyScoreType: props.partyScoreType || null,\n  partyBaseScore: 1,\n  called_tarock: props.called_tarock || null,\n  scores: {\n    [PLAYER_TYPE.DECLARER]: null,\n    [PLAYER_TYPE.OPPONENT]: null,\n  },\n});\n\nconst updateGameWithScores = (game: Game): Game => {\n  const scores = calculateGame(game);\n\n  return {\n    ...game,\n    scores: { ...scores },\n  };\n};\n\nexport interface UpdateGameProps {\n  partyScoreType?: PARTY_SCORE_TYPE;\n  called_tarock?: CalledTarockType | null;\n  partyBaseScore?: number;\n}\nexport const updateGame = (updates: UpdateGameProps) => (game: Game): Game => {\n  const partyScoreType =\n    updates.partyScoreType === undefined\n      ? game.partyScoreType\n      : updates.partyScoreType;\n  const partyBaseScore =\n    updates.partyBaseScore === undefined\n      ? game.partyBaseScore\n      : updates.partyBaseScore;\n  const partyScore =\n    partyScoreType === null\n      ? null\n      : PARTY_SCORE[partyScoreType] * partyBaseScore;\n  const contracts =\n    partyScore === null\n      ? game.contracts\n      : game.contracts.map(updateBidBaseScore(partyScore));\n\n  return updateGameWithScores({\n    ...game,\n    contracts: [...contracts],\n    ...updates,\n  });\n};\n\nexport const addContractFlipped = (contract: Contract) => (game: Game): Game =>\n  addContract(game)(contract);\n\nexport const addContract = (game: Game) => (contract: Contract): Game => {\n  const partyScore = game?.partyScoreType\n    ? PARTY_SCORE[game?.partyScoreType]\n    : null;\n  const updatedContract = createContract({ ...contract, partyScore });\n  return updateGameWithScores({\n    ...game,\n    contracts: [...game.contracts, updatedContract],\n  });\n};\n\nexport const removeContract = (game: Game) => (index: number): Game => {\n  return updateGameWithScores({\n    ...game,\n    contracts: game.contracts.filter((_, i) => i !== index),\n  });\n};\n\nexport const removeAllContract = (game: Game): Game => ({\n  ...game,\n  contracts: [],\n});\n\nexport const updateGameContract = (game: Game) => (index: number) => (\n  updated: Contract\n): Game => {\n  return updateGameWithScores({\n    ...game,\n    contracts: game.contracts.map((contract, i) =>\n      i === index ? { ...updated } : contract\n    ),\n  });\n};\n\nexport const calculateGame = (game: Game): GameScore => {\n  return game.contracts.reduce(\n    (partyScore, contract) => {\n      const score = calculateContract(contract);\n      if (score === null) {\n        return partyScore;\n      }\n\n      const addScore = (\n        prevScore: PlayerScore,\n        score: PlayerScore\n      ): PlayerScore => {\n        if (prevScore === null) {\n          return score;\n        } else {\n          return score === null ? prevScore : score + prevScore;\n        }\n      };\n\n      const taker = contract.taker;\n      const another = getAnotherPlayerType(taker);\n\n      return {\n        ...partyScore,\n        [taker]: addScore(partyScore[taker], score),\n        [another]: addScore(\n          partyScore[another],\n          score === null ? null : score * -1\n        ),\n      };\n    },\n    {\n      [PLAYER_TYPE.DECLARER]: null,\n      [PLAYER_TYPE.OPPONENT]: null,\n    }\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Box,\n  Typography as T,\n  Switch,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport {\n  BidsByGroup,\n  BidGroupType,\n  bidGroupNamesByWeight,\n  BID_TYPE,\n  getBid,\n  canSilent,\n} from \"../lib/bid\";\nimport { upperCaseToWords } from \"../lib/util\";\nimport { Contract } from \"../lib/contract\";\nimport { PLAYER_TYPE } from \"../lib/player\";\n\ninterface BidSelectorProps {\n  bidsByGroup: BidsByGroup;\n  onAddContract: (contract: Partial<Contract>) => void;\n}\nconst ContractSelector = ({ bidsByGroup, onAddContract }: BidSelectorProps) => {\n  const [silentAndWin, setSilentAndWin] = useState<boolean>(false);\n\n  const handleSwitch = () => {\n    setSilentAndWin((prev: boolean) => !prev);\n  };\n  const handleClick = (bidType: BID_TYPE) => {\n    const bid = getBid(bidType);\n    const shouldWinWithSilent = silentAndWin && !bid.notWinIfSilent;\n    onAddContract({\n      bidType: bidType,\n      taker: PLAYER_TYPE.DECLARER,\n      silent: silentAndWin && canSilent(bid),\n      bidVariant: null,\n      winByTaker: bid.winByDefault || shouldWinWithSilent || null,\n    });\n  };\n  return (\n    <Grid container spacing={1} alignItems=\"flex-end\">\n      {bidGroupNamesByWeight().map((group) => (\n        <Grid item key={group} spacing={1}>\n          <T variant=\"caption\" display=\"block\" color=\"textSecondary\">\n            {upperCaseToWords(group)}\n          </T>\n          {bidsByGroup[group as BidGroupType].map((bid) => (\n            <Box key={bid.type} component=\"span\" mr={0.5}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => handleClick(bid.type)}\n                size=\"small\"\n                disabled={silentAndWin && !canSilent(bid)}\n              >\n                {upperCaseToWords(bid.type)}\n              </Button>\n            </Box>\n          ))}\n        </Grid>\n      ))}\n      <Grid item>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={silentAndWin}\n              onChange={handleSwitch}\n              name=\"silentAndWinSwitch\"\n            />\n          }\n          label=\"Silent & Win\"\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ContractSelector;\n","import { PLAYER_TYPE } from \"./player\";\nimport {\n  BidVariant,\n  BID_TYPE,\n  canSilent,\n  hasVariant,\n  getBid,\n  getBidScore,\n} from \"./bid\";\nimport flow from \"lodash/fp/flow\";\nimport pick from \"lodash/fp/pick\";\nimport isEqual from \"lodash/fp/isEqual\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport { PartyScoreValue } from \"./game\";\n\nconst CONTRA_NAMES = [\"None\", \"Contra\", \"Recontra\", \"Subcontra\", \"Mortcontra\"];\n\ntype ContraMultiplier = number;\nexport interface Contract {\n  bidType: BID_TYPE;\n  bidBaseScore: number | null;\n  bidVariant: BidVariant | null;\n  contra: ContraMultiplier;\n  winByTaker: boolean | null;\n  taker: PLAYER_TYPE;\n  silent: boolean;\n}\n\nconst validateContract = (contract: Contract): void | undefined => {\n  const { silent, bidType, bidVariant, contra } = contract;\n  const bid = getBid(bidType);\n  if (silent && !canSilent(bid)) {\n    throw new Error(`${bid.type} can not be silent.`);\n  }\n  if (bidVariant && !hasVariant(bidVariant)(bid)) {\n    throw new Error(`${bid.type} does not have ${bidVariant} variant.`);\n  }\n  const isPowerOfTwo = Math.log2(contra) % 1 === 0;\n  if (!isPowerOfTwo) {\n    throw new Error(`Contra must be power of two, but ${contra} given.`);\n  }\n  if (contra < 1) {\n    throw new Error(`Contra must be greater than 1, but ${contra} given.`);\n  }\n};\n\nexport interface CreateContractProps {\n  bidType: BID_TYPE;\n  partyScore?: PartyScoreValue | null;\n  taker: PLAYER_TYPE;\n  silent?: boolean;\n  bidVariant?: BidVariant | null;\n  winByTaker?: boolean | null;\n}\nexport const createContract = ({\n  bidType,\n  taker,\n  partyScore = null,\n  silent = false,\n  bidVariant = null,\n  winByTaker = null,\n}: CreateContractProps): Contract => {\n  const contract = {\n    bidType,\n    bidVariant,\n    contra: 1,\n    silent,\n    winByTaker,\n    taker,\n    bidBaseScore:\n      partyScore !== null\n        ? flow(getBid, getBidScore(partyScore))(bidType)\n        : null,\n  };\n  validateContract(contract);\n  return contract;\n};\n\nexport const updateBidBaseScore = (partyScore: number) => (\n  contract: Contract\n): Contract => ({\n  ...contract,\n  bidBaseScore: flow(getBid, getBidScore(partyScore))(contract.bidType),\n});\n\nexport type UpdateContractProps = Partial<\n  Pick<Contract, \"taker\" | \"winByTaker\" | \"silent\" | \"bidVariant\" | \"contra\">\n>;\nexport const updateContract = (updates: UpdateContractProps) => (\n  contract: Contract\n): Contract => {\n  const updated = { ...contract, ...updates };\n  validateContract(updated);\n  return updated;\n};\n\nexport type ContractScore = number | null;\nexport const calculateContract = (contract: Contract): ContractScore => {\n  const { winByTaker, bidBaseScore, contra, silent } = contract;\n  if (winByTaker === null || bidBaseScore === null) {\n    return null;\n  }\n  const multiplier = silent ? 0.5 : contra;\n  const sign = winByTaker ? 1 : -1;\n  return sign * bidBaseScore * multiplier;\n};\n\nexport type ContractWithIndex = [Contract, number];\nexport const withIndices = (contracts: Contract[]): ContractWithIndex[] =>\n  contracts.map((contract, index) => [contract, index]);\n\nconst PARTY_LIKE_BIDS = [BID_TYPE.PARTY, BID_TYPE.DOUBLE_PARTY, BID_TYPE.VOLAT];\nexport const filterByPartyLike = (\n  contracts: ContractWithIndex[]\n): ContractWithIndex[] =>\n  contracts.filter(([contract, _]) =>\n    PARTY_LIKE_BIDS.includes(contract.bidType)\n  );\n\nexport const filterByProps = (props: Partial<Contract>) => (\n  contracts: ContractWithIndex[]\n): ContractWithIndex[] => {\n  return contracts.filter(([contract, _]) =>\n    flow(pick(Object.keys(props)), isEqual(props))(contract)\n  );\n};\n\nexport const groupByPlayerType = (contracts: ContractWithIndex[]) => {\n  const groupped = groupBy(([contract]) => contract.taker)(contracts);\n  return {\n    [PLAYER_TYPE.DECLARER]: groupped[PLAYER_TYPE.DECLARER] || [],\n    [PLAYER_TYPE.OPPONENT]: groupped[PLAYER_TYPE.OPPONENT] || [],\n  };\n};\n","import React from \"react\";\nimport {\n  calculateContract,\n  Contract,\n  UpdateContractProps,\n} from \"../lib/contract\";\nimport { upperCaseToWords } from \"../lib/util\";\nimport {\n  TableContainer,\n  TableHead,\n  TableBody,\n  Table,\n  TableCell,\n  TableRow,\n  IconButton,\n  Button,\n  Checkbox,\n  Typography as T,\n} from \"@material-ui/core\";\nimport { MdDelete as RemoveIcon } from \"react-icons/md\";\nimport { BidVariant, getBid } from \"../lib/bid\";\nimport VariantSelector from \"./VariantSelector\";\nimport SilentSwitch from \"./SilentSwitch\";\nimport MultiplierSelector from \"./MultiplierSelector\";\nimport {\n  getAnotherPlayerType,\n  getPlayerTypeColor,\n  PLAYER_TYPE,\n} from \"../lib/player\";\nimport curry from \"lodash/fp/curry\";\n\ninterface VariantSelectorModalProps {\n  contract: Contract;\n  onChange: (variant: BidVariant) => void;\n}\nconst VariantSelectorModal = (props: VariantSelectorModalProps) => {\n  const { contract, onChange } = props;\n  const handleChange = (variant: BidVariant) => {\n    onChange(variant);\n  };\n  const bid = getBid(contract.bidType);\n\n  if (!bid.variants) {\n    return null;\n  }\n\n  return (\n    <>\n      <VariantSelector\n        variants={bid.variants || []}\n        selected={contract.bidVariant}\n        onChange={handleChange}\n        render={(handleOpen) => (\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={handleOpen}\n            size=\"small\"\n          >\n            {upperCaseToWords(contract.bidVariant ?? \"Select variant\")}\n          </Button>\n        )}\n      />\n    </>\n  );\n};\n\nenum ACTION_TYPE {\n  DELETE = \"DELETE\",\n  CHANGE = \"CHANGE\",\n}\n\ntype ContractField = keyof UpdateContractProps;\ntype Field = ContractField | string;\ninterface ColumnDefinition {\n  field: Field;\n  headerName: string;\n  valueGetter?: (\n    contract: Contract,\n    onAction?: (actionType: ACTION_TYPE, value?: any) => void\n  ) => React.ReactNode;\n}\nconst columns: ColumnDefinition[] = [\n  {\n    field: \"bidType\",\n    headerName: \"Bid\",\n    valueGetter: (contract: Contract) => upperCaseToWords(contract.bidType),\n  },\n  {\n    field: \"bidVariant\",\n    headerName: \"Variant\",\n    valueGetter: (contract, onAction) => {\n      const handleChange = (variant: BidVariant) =>\n        onAction && onAction(ACTION_TYPE.CHANGE, variant);\n\n      return (\n        <VariantSelectorModal contract={contract} onChange={handleChange} />\n      );\n    },\n  },\n  {\n    field: \"taker\",\n    headerName: \"Taker\",\n    valueGetter: (contract, onAction) => {\n      const newTaker = getAnotherPlayerType(contract.taker);\n      const handleClick = () =>\n        onAction && onAction(ACTION_TYPE.CHANGE, newTaker);\n      const color = getPlayerTypeColor(contract.taker);\n      return (\n        <Button color={color} onClick={handleClick}>\n          {contract.taker}\n        </Button>\n      );\n    },\n  },\n  {\n    field: \"silent\",\n    headerName: \"Silent\",\n    valueGetter: (contract, onAction) => {\n      const handleChange = (silent: boolean) =>\n        onAction && onAction(ACTION_TYPE.CHANGE, silent);\n      return (\n        <SilentSwitch\n          bidType={contract.bidType}\n          onChange={handleChange}\n          value={contract.silent}\n        />\n      );\n    },\n  },\n  {\n    field: \"bidBaseScore\",\n    headerName: \"Base Score\",\n  },\n  {\n    headerName: \"Contra\",\n    field: \"contra\",\n    valueGetter: (contract, onAction) => {\n      const handleChange = (contra: number) =>\n        onAction && onAction(ACTION_TYPE.CHANGE, contra);\n\n      if (getBid(contract.bidType).denyContra) {\n        return null;\n      }\n      return (\n        <MultiplierSelector\n          onChange={handleChange}\n          value={contract.contra}\n          disabled={contract.silent}\n        />\n      );\n    },\n  },\n  {\n    field: \"winByTaker\",\n    headerName: \"Win by the Taker?\",\n    valueGetter: (contract, onAction) => {\n      const { winByTaker, taker } = contract;\n      const handleClick = () => {\n        const nextValue =\n          winByTaker === null ? true : winByTaker === true ? false : null;\n        onAction && onAction(ACTION_TYPE.CHANGE, nextValue);\n      };\n\n      const title =\n        winByTaker === true\n          ? \"Won by the Taker!\"\n          : winByTaker === false\n          ? \"Lose by the Taker!\"\n          : \"Still unknown / Not count in final score...\";\n\n      return (\n        <Checkbox\n          title={title}\n          checked={winByTaker === true}\n          indeterminate={winByTaker === null}\n          onClick={handleClick}\n          color={taker === PLAYER_TYPE.DECLARER ? \"primary\" : \"secondary\"}\n        />\n      );\n    },\n  },\n  {\n    field: \"takerScore\",\n    headerName: \"Taker score\",\n    valueGetter: (contract) => (\n      <T\n        variant=\"button\"\n        color={\n          contract.taker === PLAYER_TYPE.DECLARER ? \"primary\" : \"secondary\"\n        }\n      >\n        {calculateContract(contract)}\n      </T>\n    ),\n  },\n  {\n    field: \"actions\",\n    headerName: \" \",\n    valueGetter: (_, onAction) => {\n      const handleClick = () => onAction && onAction(ACTION_TYPE.DELETE, null);\n      return (\n        <IconButton title=\"Remove\" onClick={handleClick}>\n          <RemoveIcon />\n        </IconButton>\n      );\n    },\n  },\n];\n\nconst isContractField = (\n  field: Field,\n  contract: Contract\n): field is ContractField => {\n  return field in contract;\n};\n\ninterface ContractsTableProps {\n  contracts: Contract[];\n  onChange: (index: number, field: keyof Contract, value: any) => void;\n  onDelete: (index: number) => void;\n}\nconst ContractsTable = (props: ContractsTableProps) => {\n  const { contracts, onChange, onDelete } = props;\n\n  function handleAction(\n    index: number,\n    field: ContractField | null,\n    actionType: ACTION_TYPE,\n    value: any\n  ) {\n    if (actionType === ACTION_TYPE.DELETE) {\n      return onDelete(index);\n    }\n    if (actionType === ACTION_TYPE.CHANGE && field !== null) {\n      return onChange(index, field, value);\n    }\n    throw new Error(\n      `Invalid if ACTION_TYPE (${actionType}) is CHANGE the field can not be null.`\n    );\n  }\n\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {columns.map((column, index) => (\n              <TableCell key={index}> {column.headerName} </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {contracts.map((contract, rowIndex) => (\n            <TableRow key={rowIndex}>\n              {columns.map((column, cellIndex) => (\n                <TableCell key={cellIndex}>\n                  {isContractField(column.field, contract)\n                    ? column.valueGetter\n                      ? column.valueGetter(\n                          contract,\n                          curry(handleAction)(rowIndex)(column.field)\n                        )\n                      : contract[column.field]\n                    : column.valueGetter\n                    ? column.valueGetter(\n                        contract,\n                        curry(handleAction)(rowIndex)(null)\n                      )\n                    : \" \"}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default ContractsTable;\n","import React, { ChangeEvent, useState, ReactNode } from \"react\";\nimport {\n  FormControlLabel,\n  RadioGroup,\n  Radio,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogActions,\n} from \"@material-ui/core\";\nimport { BidVariant } from \"../lib/bid\";\nimport { upperCaseToWords } from \"../lib/util\";\n\ninterface VariantSelectorProps {\n  render: (handleOpen: () => void) => ReactNode;\n  variants: BidVariant[];\n  selected: BidVariant | null;\n  onChange: (variant: BidVariant) => void;\n  onClose?: () => void;\n}\nconst VariantSelector = (props: VariantSelectorProps) => {\n  const { variants, selected, onChange, render, onClose } = props;\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => {\n    setOpen(false);\n    onClose && onClose();\n  };\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value as BidVariant);\n    handleClose();\n  };\n\n  return (\n    <>\n      {render(handleOpen)}\n      <Dialog open={open} onClose={handleClose}>\n        <DialogContent>\n          <RadioGroup name=\"variants\" onChange={handleChange} value={selected}>\n            {variants.map((variant: BidVariant) => (\n              <FormControlLabel\n                control={<Radio value={variant} />}\n                label={upperCaseToWords(variant)}\n              />\n            ))}\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default VariantSelector;\n","import React from \"react\";\nimport { Switch, FormControlLabel, FormGroup } from \"@material-ui/core\";\nimport { BID_TYPE, canSilent, getBid } from \"../lib/bid\";\n\ninterface SilentSwitchProps {\n  bidType: BID_TYPE;\n  onChange: (value: boolean) => void;\n  value?: boolean;\n  label?: boolean;\n}\nconst SilentSwitch = ({\n  bidType,\n  onChange,\n  value,\n  label,\n}: SilentSwitchProps) => {\n  const bid = getBid(bidType);\n  if (!canSilent(bid)) {\n    return null;\n  }\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Switch\n            onChange={(event) => onChange(event.target.checked)}\n            checked={value}\n          />\n        }\n        label={label ? \"Silent\" : \"\"}\n      />\n    </FormGroup>\n  );\n};\nexport default SilentSwitch;\n","import React from \"react\";\nimport { IconButton, Typography as T } from \"@material-ui/core\";\nimport {\n  MdArrowUpward as DoubleContraIcon,\n  MdArrowDownward as DivideContraIcon,\n} from \"react-icons/md\";\ninterface MultiplierSelectorProps {\n  value: number;\n  onChange: (value: number) => void;\n  disabled?: boolean;\n}\nconst MultiplierSelector = ({\n  value,\n  onChange,\n  disabled,\n}: MultiplierSelectorProps) => {\n  const handleChange = (value: number) => onChange && onChange(value);\n  const handleDivide = () => value > 1 && handleChange(value / 2);\n  const handleDouble = () => handleChange(value * 2);\n\n  return (\n    <>\n      <T\n        component={disabled ? \"s\" : \"span\"}\n        color={disabled ? \"textPrimary\" : \"textSecondary\"}\n      >\n        {value}\n      </T>\n      <IconButton title=\"Double\" onClick={handleDouble} disabled={disabled}>\n        <DoubleContraIcon />\n      </IconButton>\n      <IconButton\n        title=\"Divide by 2\"\n        onClick={handleDivide}\n        disabled={value === 1 || disabled}\n      >\n        <DivideContraIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default MultiplierSelector;\n","import React, { ChangeEvent } from \"react\";\nimport {\n  CALLED_TAROCK,\n  Game,\n  UpdateGameProps,\n  PARTY_SCORE,\n  PARTY_SCORE_TYPE,\n} from \"../lib/game\";\nimport {\n  Grid,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Typography as T,\n} from \"@material-ui/core\";\nimport { upperCaseToWords } from \"../lib/util\";\nimport MultiplierSelector from \"./MultiplierSelector\";\n\nconst calledTarockOptions = [\"_None_\", ...Object.keys(CALLED_TAROCK)];\nconst partyScoreOptions = Object.keys(PARTY_SCORE);\n\ninterface GamePropertiesProps {\n  game: Game;\n  onChange: (property: keyof UpdateGameProps, value: any) => void;\n}\nconst GameProperties = (props: GamePropertiesProps) => {\n  const { game, onChange } = props;\n  return (\n    <Grid container spacing={3} alignContent=\"space-around\">\n      <Grid item>\n        <FormControl component=\"fieldset\">\n          <InputLabel id=\"called-tarock-selector\">Called</InputLabel>\n          <Select\n            value={game.called_tarock || \"_None_\"}\n            onChange={(event: ChangeEvent<{ value: string }>) => {\n              onChange(\"called_tarock\", event.target.value);\n            }}\n            labelId=\"called-tarock-selector\"\n          >\n            {calledTarockOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option === \"_None_\" ? \"None\" : option}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item>\n        <FormControl component=\"fieldset\">\n          <FormLabel>Party Score</FormLabel>\n          <RadioGroup\n            row\n            value={game.partyScoreType}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => {\n              onChange(\n                \"partyScoreType\",\n                event.target.value as PARTY_SCORE_TYPE\n              );\n            }}\n          >\n            {partyScoreOptions.map((option: PARTY_SCORE_TYPE) => (\n              <FormControlLabel\n                key={option}\n                value={option}\n                control={<Radio />}\n                label={upperCaseToWords(option)}\n              />\n            ))}\n          </RadioGroup>\n        </FormControl>\n      </Grid>\n      <Grid item>\n        <T variant=\"caption\" display=\"block\" color=\"textSecondary\">\n          Party Base Score\n        </T>\n        <MultiplierSelector\n          value={game.partyBaseScore}\n          onChange={(score) => {\n            onChange(\"partyBaseScore\", score);\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default GameProperties;\n","import {\n  Button,\n  Chip,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Grid,\n  Card,\n  CardHeader,\n  Avatar,\n  CardContent,\n  makeStyles,\n  Typography as T,\n  CardActions,\n  IconButton,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { Game } from \"../lib/game\";\nimport {\n  createPlayer,\n  getPlayerTypeColor,\n  Player,\n  PlayerList,\n  PLAYER_TYPE,\n  rotatePlayerTypeWithNull,\n  updatePlayer,\n  updatePlayerAt,\n  removePlayer,\n  UpdatePlayerProps,\n} from \"../lib/player\";\nimport { Id } from \"../lib/util\";\nimport { MdDelete as RemoveIcon } from \"react-icons/md\";\nimport { MdEdit as EditIcon } from \"react-icons/md\";\nimport { MdPerson as UserIcon } from \"react-icons/md\";\nimport { MdPersonAdd as AddUserIcon } from \"react-icons/md\";\nimport { MdDone as FinishEditingIcon } from \"react-icons/md\";\n\ninterface PlayerAvatarProps {\n  player: Player;\n}\nconst PlayerAvatar = ({ player }: PlayerAvatarProps) => (\n  <Avatar>\n    {player.name.length > 0 ? <>{player.name.slice(0, 1)}</> : <UserIcon />}\n  </Avatar>\n);\n\ninterface EditablePlayerItemProps {\n  player: Player;\n  onRemove: (player: Player) => void;\n  onChange: (updated: Player) => void;\n}\nconst EditablePlayerItem = (props: EditablePlayerItemProps) => {\n  const { player, onRemove, onChange } = props;\n  const handleRemove = () => onRemove(player);\n  const handleChange = (prop: string) => (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => onChange(updatePlayer({ [prop]: event.target.value })(player));\n  const handleNameChange = handleChange(\"name\");\n  const handleBaseScoreChange = handleChange(\"baseScore\");\n  const color = getPlayerTypeColor(player.type);\n  return (\n    <Card>\n      <CardContent>\n        <Grid container direction=\"row\" spacing={2}>\n          <Grid item>\n            <PlayerAvatar player={player} />\n          </Grid>\n          <Grid container item direction=\"column\" xs spacing={2}>\n            <Grid item>\n              <TextField\n                id={`${player.id}_name`}\n                label=\"Name\"\n                value={player.name}\n                onChange={handleNameChange}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                id={`${player.id}_baseScore`}\n                label=\"Base Score\"\n                type=\"number\"\n                value={player.baseScore}\n                onChange={handleBaseScoreChange}\n              />\n            </Grid>\n          </Grid>\n          <Grid item>\n            <IconButton onClick={handleRemove}>\n              <RemoveIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface PlayerItemProps {\n  player: Player;\n  onChange: (updated: Player) => void;\n}\nconst PlayerItem = ({ player, onChange }: PlayerItemProps) => {\n  const handleChange = () => {\n    onChange(\n      updatePlayer({ type: rotatePlayerTypeWithNull(player.type) })(player)\n    );\n  };\n  const color = getPlayerTypeColor(player.type);\n  const playing = player.type !== null;\n  const hasCurrentScore = player.currentScore !== null;\n  const currentScoreText =\n    playing && hasCurrentScore ? ` (${player.currentScore})` : \"\";\n  const score =\n    player.score !== null ? player.score + player.baseScore : player.baseScore;\n  return (\n    <Card>\n      <CardHeader\n        avatar={<PlayerAvatar player={player} />}\n        title={player.name}\n        subheader={`${score}${currentScoreText}`}\n      />\n      <CardActions>\n        <Button variant=\"outlined\" color={color} onClick={handleChange}>\n          {player.type || \"Not playing\"}\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\ninterface PlayersProps {\n  players: Player[];\n  onPlayerListChange: (playerList: PlayerList) => void;\n  onSaveScores: () => void;\n  saveDisabled: boolean;\n}\nconst Players = (props: PlayersProps) => {\n  const { players, onPlayerListChange, onSaveScores, saveDisabled } = props;\n  const [edit, setEdit] = useState(false);\n\n  const handleToogleEdit = () => setEdit((prev) => !prev);\n  const handleAdd = () => {\n    onPlayerListChange([...players, createPlayer()]);\n  };\n  const handleRemove = (player: Player) => {\n    onPlayerListChange(removePlayer(player)(players));\n  };\n  const handleChange = (updated: Player) => {\n    onPlayerListChange(updatePlayerAt(updated)(players));\n  };\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item container direction=\"row\" alignItems=\"center\">\n        <Grid item>\n          <IconButton onClick={handleAdd} title=\"Add new player\">\n            <AddUserIcon />\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <IconButton\n            onClick={handleToogleEdit}\n            title={edit ? \"Finish editing\" : \"Edit user properties\"}\n          >\n            {edit ? <FinishEditingIcon /> : <EditIcon />}\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"outlined\"\n            disabled={saveDisabled}\n            onClick={onSaveScores}\n          >\n            Save scores\n          </Button>\n        </Grid>\n      </Grid>\n      {players.map((player) => (\n        <Grid item xs={edit ? 3 : false}>\n          {edit ? (\n            <EditablePlayerItem\n              key={player.id}\n              onChange={handleChange}\n              onRemove={handleRemove}\n              player={player}\n            />\n          ) : (\n            <PlayerItem\n              key={player.id}\n              player={player}\n              onChange={handleChange}\n            />\n          )}\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Players;\n","import { Game } from \"./game\";\nimport {\n  PlayerList,\n  PlayerScore,\n  PLAYER_TYPE,\n  getPlayerNumberByType,\n  PlayerListObject,\n  Player,\n  updatePlayer,\n} from \"./player\";\nimport assignWith from \"lodash/fp/assignWith\";\nimport { isEqual } from \"lodash\";\n\nconst getScore = (players: PlayerList) => (\n  game: Game\n): [PlayerScore, PlayerScore] => {\n  const [numberOfDeclarers, numberOfOpponents] = getPlayerNumberByType(players);\n  const opponentsGameScore = game.scores[PLAYER_TYPE.OPPONENT];\n  const declarersGameScore = game.scores[PLAYER_TYPE.DECLARER];\n  if (opponentsGameScore === null || declarersGameScore === null) {\n    return [null, null];\n  }\n  if (numberOfOpponents === 2 && numberOfDeclarers === 2) {\n    return [declarersGameScore, opponentsGameScore];\n  }\n  if (numberOfOpponents === 3 && numberOfDeclarers === 1) {\n    return [declarersGameScore * 3, opponentsGameScore];\n  }\n  if (numberOfOpponents === 1 && numberOfDeclarers === 3) {\n    return [declarersGameScore, opponentsGameScore * 3];\n  }\n  return [null, null];\n};\n\nexport const getCurrentScoreForPlayers = (game: Game) => (\n  players: PlayerList\n): PlayerList => {\n  return players.map((player) => {\n    const [declarersScore, opponentsScore] = getScore(players)(game);\n    const score = {\n      [PLAYER_TYPE.OPPONENT]: opponentsScore,\n      [PLAYER_TYPE.DECLARER]: declarersScore,\n    };\n    return {\n      ...player,\n      currentScore: player.type === null ? null : score[player.type],\n    };\n  });\n};\n\nexport const isReadyForSave = (players: PlayerList) => (\n  game: Game\n): boolean => {\n  const numbers = getPlayerNumberByType(players);\n  const playerNumberValid =\n    isEqual(numbers, [1, 3]) ||\n    isEqual(numbers, [2, 2]) ||\n    isEqual(numbers, [3, 1]);\n  const gameScoreValid =\n    game.scores[PLAYER_TYPE.DECLARER] !== null &&\n    game.scores[PLAYER_TYPE.OPPONENT] !== null;\n  return playerNumberValid && gameScoreValid;\n};\n\nconst defined = (value: any): boolean =>\n  Boolean(value !== undefined && value !== null);\n\nconst scoreSumAssigner = (score: number | undefined, player: Player) => {\n  const left = defined(score) ? score : 0;\n  const right = defined(player.currentScore) ? player.currentScore : 0;\n  return (left as number) + (right as number);\n};\n\nexport type PlayerScores = { [key: string]: number };\n\nexport const sumPlayerScores = (\n  playerListObjects: PlayerListObject[]\n): PlayerScores => {\n  return playerListObjects.reduce(\n    (scores, playerListObject) =>\n      assignWith(scoreSumAssigner)(scores, playerListObject),\n    {} as PlayerScores\n  );\n};\n\nexport const assignScoresToPlayers = (players: PlayerList) => (\n  scores: PlayerScores\n): PlayerList =>\n  players.map((player) =>\n    scores[player.id] === undefined\n      ? player\n      : updatePlayer({ score: scores[player.id] })(player)\n  );\n","import React, { useEffect, useState } from \"react\";\nimport { BID_TYPE, getAllBidsByGorup } from \"../lib/bid\";\nimport ContractSelector from \"./ContractSelector\";\nimport {\n  Game,\n  createGame,\n  addContract,\n  updateGame,\n  updateGameContract,\n  removeContract,\n  UpdateGameProps,\n  removeAllContract,\n  isPartyLike,\n  addContractFlipped,\n} from \"../lib/game\";\nimport { Contract, createContract, updateContract } from \"../lib/contract\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport ContractsTable from \"./ContractsTable\";\nimport GameProperties from \"./GameProperties\";\nimport flow from \"lodash/fp/flow\";\nimport concat from \"lodash/fp/concat\";\nimport Players from \"./Players\";\nimport {\n  clearPlayersType,\n  createPlayerListObject,\n  filterPlayersInGame,\n  Player,\n  PlayerList,\n  PlayerListObject,\n  PLAYER_TYPE,\n} from \"../lib/player\";\nimport {\n  assignScoresToPlayers,\n  getCurrentScoreForPlayers,\n  isReadyForSave,\n  sumPlayerScores,\n} from \"../lib/gameScoreList\";\n// import ScoreSheet from \"./ScoreSheet\";\n\nconst allBidsByGroup = getAllBidsByGorup();\n\nconst TarockSheet = () => {\n  const [game, setGame] = useState<Game>(createGame());\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [gameScoreList, setGameScoreList] = useState<PlayerListObject[]>([]);\n\n  useEffect(() => {\n    setPlayers(getCurrentScoreForPlayers(game));\n  }, [game]);\n\n  const handleContractDelete = (index: number) =>\n    setGame(removeContract(game)(index));\n  const handleResetGame = () => setGame(createGame());\n  const handlePlayerListChange = (playerList: PlayerList) => {\n    updatePlayersState(playerList);\n  };\n  const handleChangeGameProperties = (\n    prop: keyof UpdateGameProps,\n    value: any\n  ) => {\n    if (prop === \"partyScoreType\") {\n      const contract = isPartyLike(value)\n        ? createContract({\n            bidType: BID_TYPE.PARTY,\n            taker: PLAYER_TYPE.DECLARER,\n          })\n        : createContract({\n            bidType: BID_TYPE.KLOPICZKY,\n            taker: PLAYER_TYPE.DECLARER,\n            winByTaker: true,\n          });\n      const updated = flow(\n        removeAllContract,\n        addContractFlipped(contract),\n        updateGame({ [prop]: value })\n      )(game);\n      setGame(updated);\n    } else {\n      setGame(updateGame({ [prop]: value })(game));\n    }\n  };\n  const handleAddContract = (contract: Contract) => {\n    return setGame(flow(createContract, addContract(game))(contract));\n  };\n  const handleChangeContract = (\n    index: number,\n    field: keyof Contract,\n    value: any\n  ) => {\n    setGame(\n      flow(\n        updateContract({ [field]: value }),\n        updateGameContract(game)(index)\n      )(game.contracts[index])\n    );\n  };\n  const handleSaveScores = () => {\n    const updatedGameScoreList = flow(\n      filterPlayersInGame,\n      createPlayerListObject,\n      concat(gameScoreList)\n    )(players);\n    updateGameScoreListState(updatedGameScoreList);\n  };\n  const updatePlayersState = (updated: PlayerList) => {\n    flow(getCurrentScoreForPlayers(game), setPlayers)(updated);\n  };\n  const updateGameScoreListState = (updated: PlayerListObject[]) => {\n    flow(\n      sumPlayerScores,\n      assignScoresToPlayers(players),\n      clearPlayersType,\n      updatePlayersState\n    )(updated);\n    setGameScoreList(updated);\n    setGame(createGame());\n  };\n\n  return (\n    <Grid container spacing={3} direction=\"column\">\n      <Grid item>\n        <Players\n          players={players}\n          onPlayerListChange={handlePlayerListChange}\n          onSaveScores={handleSaveScores}\n          saveDisabled={!isReadyForSave(players)(game)}\n        />\n      </Grid>\n      <Grid item>\n        <Grid item container spacing={1} direction=\"row\">\n          <Grid item>\n            <GameProperties game={game} onChange={handleChangeGameProperties} />\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" onClick={handleResetGame}>\n              Reset Game\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <ContractSelector\n          key={\n            game.partyScoreType === null ? 1 : 0\n          } /* Resets the internal state if the game is reseted */\n          bidsByGroup={allBidsByGroup}\n          onAddContract={handleAddContract}\n        />\n      </Grid>\n      <Grid item>\n        <ContractsTable\n          contracts={game?.contracts as Contract[]}\n          onChange={handleChangeContract}\n          onDelete={handleContractDelete}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default TarockSheet;\n","import React from \"react\";\nimport {\n  AppBar,\n  Container,\n  makeStyles,\n  Typography as T,\n} from \"@material-ui/core\";\nimport { CgCardHearts as Icon } from \"react-icons/cg\";\nimport TarockSheet from \"./components/TarockSheet\";\n\nconst useAppStyle = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4),\n  },\n}));\n\nfunction App() {\n  const classes = useAppStyle();\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <T variant=\"h2\">\n          <Icon color=\"red\" /> Tarock Sheet\n        </T>\n      </AppBar>\n      <Container className={classes.container}>\n        <TarockSheet />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}